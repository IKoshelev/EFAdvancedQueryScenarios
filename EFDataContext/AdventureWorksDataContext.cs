

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "EFDataContext\App.config"
//     Connection String Name: "AdventureWorks"
//     Connection String:      "Data Source=TRENZALORE-PC\SQLEXPRESS;Initial Catalog=AdventureWorks2014;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace EFDataContext
{
    using System.Linq;

    #region Unit of work

    public partial interface IAdventureWorksDataContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        System.Data.Entity.DbSet<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials
        System.Data.Entity.DbSet<BusinessEntity> BusinessEntities { get; set; } // BusinessEntity
        System.Data.Entity.DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        System.Data.Entity.DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; } // BusinessEntityContact
        System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; } // ContactType
        System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; } // CountryRegion
        System.Data.Entity.DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        System.Data.Entity.DbSet<CreditCard> CreditCards { get; set; } // CreditCard
        System.Data.Entity.DbSet<Culture> Cultures { get; set; } // Culture
        System.Data.Entity.DbSet<Currency> Currencies { get; set; } // Currency
        System.Data.Entity.DbSet<CurrencyRate> CurrencyRates { get; set; } // CurrencyRate
        System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        System.Data.Entity.DbSet<Department> Departments { get; set; } // Department
        System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        System.Data.Entity.DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        System.Data.Entity.DbSet<EmployeePayHistory> EmployeePayHistories { get; set; } // EmployeePayHistory
        System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        System.Data.Entity.DbSet<Illustration> Illustrations { get; set; } // Illustration
        System.Data.Entity.DbSet<JobCandidate> JobCandidates { get; set; } // JobCandidate
        System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        System.Data.Entity.DbSet<Person> People { get; set; } // Person
        System.Data.Entity.DbSet<PersonCreditCard> PersonCreditCards { get; set; } // PersonCreditCard
        System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        System.Data.Entity.DbSet<ProductCostHistory> ProductCostHistories { get; set; } // ProductCostHistory
        System.Data.Entity.DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        System.Data.Entity.DbSet<ProductDocument> ProductDocuments { get; set; } // ProductDocument
        System.Data.Entity.DbSet<ProductInventory> ProductInventories { get; set; } // ProductInventory
        System.Data.Entity.DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; } // ProductListPriceHistory
        System.Data.Entity.DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        System.Data.Entity.DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; } // ProductModelIllustration
        System.Data.Entity.DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        System.Data.Entity.DbSet<ProductPhoto> ProductPhotoes { get; set; } // ProductPhoto
        System.Data.Entity.DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; } // ProductProductPhoto
        System.Data.Entity.DbSet<ProductReview> ProductReviews { get; set; } // ProductReview
        System.Data.Entity.DbSet<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory
        System.Data.Entity.DbSet<ProductVendor> ProductVendors { get; set; } // ProductVendor
        System.Data.Entity.DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        System.Data.Entity.DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        System.Data.Entity.DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        System.Data.Entity.DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        System.Data.Entity.DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        System.Data.Entity.DbSet<SalesPerson> SalesPersons { get; set; } // SalesPerson
        System.Data.Entity.DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        System.Data.Entity.DbSet<SalesReason> SalesReasons { get; set; } // SalesReason
        System.Data.Entity.DbSet<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate
        System.Data.Entity.DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory
        System.Data.Entity.DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        System.Data.Entity.DbSet<ScrapReason> ScrapReasons { get; set; } // ScrapReason
        System.Data.Entity.DbSet<Shift> Shifts { get; set; } // Shift
        System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; } // ShipMethod
        System.Data.Entity.DbSet<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem
        System.Data.Entity.DbSet<SpecialOffer> SpecialOffers { get; set; } // SpecialOffer
        System.Data.Entity.DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; } // SpecialOfferProduct
        System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; } // StateProvince
        System.Data.Entity.DbSet<Store> Stores { get; set; } // Store
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory
        System.Data.Entity.DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        System.Data.Entity.DbSet<UnitMeasure> UnitMeasures { get; set; } // UnitMeasure
        System.Data.Entity.DbSet<VAdditionalContactInfo> VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        System.Data.Entity.DbSet<VEmployee> VEmployees { get; set; } // vEmployee
        System.Data.Entity.DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; } // vEmployeeDepartment
        System.Data.Entity.DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        System.Data.Entity.DbSet<Vendor> Vendors { get; set; } // Vendor
        System.Data.Entity.DbSet<VIndividualCustomer> VIndividualCustomers { get; set; } // vIndividualCustomer
        System.Data.Entity.DbSet<VJobCandidate> VJobCandidates { get; set; } // vJobCandidate
        System.Data.Entity.DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; } // vJobCandidateEducation
        System.Data.Entity.DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; } // vJobCandidateEmployment
        System.Data.Entity.DbSet<VPersonDemographic> VPersonDemographics { get; set; } // vPersonDemographics
        System.Data.Entity.DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        System.Data.Entity.DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        System.Data.Entity.DbSet<VProductModelInstruction> VProductModelInstructions { get; set; } // vProductModelInstructions
        System.Data.Entity.DbSet<VSalesPerson> VSalesPersons { get; set; } // vSalesPerson
        System.Data.Entity.DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        System.Data.Entity.DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        System.Data.Entity.DbSet<VStoreWithAddress> VStoreWithAddresses { get; set; } // vStoreWithAddresses
        System.Data.Entity.DbSet<VStoreWithContact> VStoreWithContacts { get; set; } // vStoreWithContacts
        System.Data.Entity.DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; } // vStoreWithDemographics
        System.Data.Entity.DbSet<VVendorWithAddress> VVendorWithAddresses { get; set; } // vVendorWithAddresses
        System.Data.Entity.DbSet<VVendorWithContact> VVendorWithContacts { get; set; } // vVendorWithContacts
        System.Data.Entity.DbSet<WorkOrder> WorkOrders { get; set; } // WorkOrder
        System.Data.Entity.DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class AdventureWorksDataContext : System.Data.Entity.DbContext, IAdventureWorksDataContext
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        public System.Data.Entity.DbSet<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials
        public System.Data.Entity.DbSet<BusinessEntity> BusinessEntities { get; set; } // BusinessEntity
        public System.Data.Entity.DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public System.Data.Entity.DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; } // BusinessEntityContact
        public System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; } // ContactType
        public System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; } // CountryRegion
        public System.Data.Entity.DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public System.Data.Entity.DbSet<CreditCard> CreditCards { get; set; } // CreditCard
        public System.Data.Entity.DbSet<Culture> Cultures { get; set; } // Culture
        public System.Data.Entity.DbSet<Currency> Currencies { get; set; } // Currency
        public System.Data.Entity.DbSet<CurrencyRate> CurrencyRates { get; set; } // CurrencyRate
        public System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // Department
        public System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public System.Data.Entity.DbSet<EmployeePayHistory> EmployeePayHistories { get; set; } // EmployeePayHistory
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<Illustration> Illustrations { get; set; } // Illustration
        public System.Data.Entity.DbSet<JobCandidate> JobCandidates { get; set; } // JobCandidate
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        public System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<PersonCreditCard> PersonCreditCards { get; set; } // PersonCreditCard
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<ProductCostHistory> ProductCostHistories { get; set; } // ProductCostHistory
        public System.Data.Entity.DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        public System.Data.Entity.DbSet<ProductDocument> ProductDocuments { get; set; } // ProductDocument
        public System.Data.Entity.DbSet<ProductInventory> ProductInventories { get; set; } // ProductInventory
        public System.Data.Entity.DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; } // ProductListPriceHistory
        public System.Data.Entity.DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        public System.Data.Entity.DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; } // ProductModelIllustration
        public System.Data.Entity.DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        public System.Data.Entity.DbSet<ProductPhoto> ProductPhotoes { get; set; } // ProductPhoto
        public System.Data.Entity.DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; } // ProductProductPhoto
        public System.Data.Entity.DbSet<ProductReview> ProductReviews { get; set; } // ProductReview
        public System.Data.Entity.DbSet<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory
        public System.Data.Entity.DbSet<ProductVendor> ProductVendors { get; set; } // ProductVendor
        public System.Data.Entity.DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public System.Data.Entity.DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public System.Data.Entity.DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public System.Data.Entity.DbSet<SalesPerson> SalesPersons { get; set; } // SalesPerson
        public System.Data.Entity.DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public System.Data.Entity.DbSet<SalesReason> SalesReasons { get; set; } // SalesReason
        public System.Data.Entity.DbSet<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate
        public System.Data.Entity.DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory
        public System.Data.Entity.DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public System.Data.Entity.DbSet<ScrapReason> ScrapReasons { get; set; } // ScrapReason
        public System.Data.Entity.DbSet<Shift> Shifts { get; set; } // Shift
        public System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; } // ShipMethod
        public System.Data.Entity.DbSet<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem
        public System.Data.Entity.DbSet<SpecialOffer> SpecialOffers { get; set; } // SpecialOffer
        public System.Data.Entity.DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; } // StateProvince
        public System.Data.Entity.DbSet<Store> Stores { get; set; } // Store
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory
        public System.Data.Entity.DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        public System.Data.Entity.DbSet<UnitMeasure> UnitMeasures { get; set; } // UnitMeasure
        public System.Data.Entity.DbSet<VAdditionalContactInfo> VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        public System.Data.Entity.DbSet<VEmployee> VEmployees { get; set; } // vEmployee
        public System.Data.Entity.DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; } // vEmployeeDepartment
        public System.Data.Entity.DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        public System.Data.Entity.DbSet<Vendor> Vendors { get; set; } // Vendor
        public System.Data.Entity.DbSet<VIndividualCustomer> VIndividualCustomers { get; set; } // vIndividualCustomer
        public System.Data.Entity.DbSet<VJobCandidate> VJobCandidates { get; set; } // vJobCandidate
        public System.Data.Entity.DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; } // vJobCandidateEducation
        public System.Data.Entity.DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; } // vJobCandidateEmployment
        public System.Data.Entity.DbSet<VPersonDemographic> VPersonDemographics { get; set; } // vPersonDemographics
        public System.Data.Entity.DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        public System.Data.Entity.DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        public System.Data.Entity.DbSet<VProductModelInstruction> VProductModelInstructions { get; set; } // vProductModelInstructions
        public System.Data.Entity.DbSet<VSalesPerson> VSalesPersons { get; set; } // vSalesPerson
        public System.Data.Entity.DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        public System.Data.Entity.DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        public System.Data.Entity.DbSet<VStoreWithAddress> VStoreWithAddresses { get; set; } // vStoreWithAddresses
        public System.Data.Entity.DbSet<VStoreWithContact> VStoreWithContacts { get; set; } // vStoreWithContacts
        public System.Data.Entity.DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; } // vStoreWithDemographics
        public System.Data.Entity.DbSet<VVendorWithAddress> VVendorWithAddresses { get; set; } // vVendorWithAddresses
        public System.Data.Entity.DbSet<VVendorWithContact> VVendorWithContacts { get; set; } // vVendorWithContacts
        public System.Data.Entity.DbSet<WorkOrder> WorkOrders { get; set; } // WorkOrder
        public System.Data.Entity.DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting

        static AdventureWorksDataContext()
        {
            System.Data.Entity.Database.SetInitializer<AdventureWorksDataContext>(null);
        }

        public AdventureWorksDataContext()
            : base("Name=AdventureWorks")
        {
            InitializePartial();
        }

        public AdventureWorksDataContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public AdventureWorksDataContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public AdventureWorksDataContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public AdventureWorksDataContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration());
            modelBuilder.Configurations.Add(new BillOfMaterialConfiguration());
            modelBuilder.Configurations.Add(new BusinessEntityConfiguration());
            modelBuilder.Configurations.Add(new BusinessEntityAddressConfiguration());
            modelBuilder.Configurations.Add(new BusinessEntityContactConfiguration());
            modelBuilder.Configurations.Add(new ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionCurrencyConfiguration());
            modelBuilder.Configurations.Add(new CreditCardConfiguration());
            modelBuilder.Configurations.Add(new CultureConfiguration());
            modelBuilder.Configurations.Add(new CurrencyConfiguration());
            modelBuilder.Configurations.Add(new CurrencyRateConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new DocumentConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new EmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new EmployeePayHistoryConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new IllustrationConfiguration());
            modelBuilder.Configurations.Add(new JobCandidateConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new PasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonCreditCardConfiguration());
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductCostHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new ProductDocumentConfiguration());
            modelBuilder.Configurations.Add(new ProductInventoryConfiguration());
            modelBuilder.Configurations.Add(new ProductListPriceHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProductModelConfiguration());
            modelBuilder.Configurations.Add(new ProductModelIllustrationConfiguration());
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionCultureConfiguration());
            modelBuilder.Configurations.Add(new ProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new ProductProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new ProductReviewConfiguration());
            modelBuilder.Configurations.Add(new ProductSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductVendorConfiguration());
            modelBuilder.Configurations.Add(new PurchaseOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new PurchaseOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.Configurations.Add(new SalesPersonConfiguration());
            modelBuilder.Configurations.Add(new SalesPersonQuotaHistoryConfiguration());
            modelBuilder.Configurations.Add(new SalesReasonConfiguration());
            modelBuilder.Configurations.Add(new SalesTaxRateConfiguration());
            modelBuilder.Configurations.Add(new SalesTerritoryConfiguration());
            modelBuilder.Configurations.Add(new SalesTerritoryHistoryConfiguration());
            modelBuilder.Configurations.Add(new ScrapReasonConfiguration());
            modelBuilder.Configurations.Add(new ShiftConfiguration());
            modelBuilder.Configurations.Add(new ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new ShoppingCartItemConfiguration());
            modelBuilder.Configurations.Add(new SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new StoreConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TransactionHistoryConfiguration());
            modelBuilder.Configurations.Add(new TransactionHistoryArchiveConfiguration());
            modelBuilder.Configurations.Add(new UnitMeasureConfiguration());
            modelBuilder.Configurations.Add(new VAdditionalContactInfoConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeDepartmentConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new VendorConfiguration());
            modelBuilder.Configurations.Add(new VIndividualCustomerConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateEducationConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateEmploymentConfiguration());
            modelBuilder.Configurations.Add(new VPersonDemographicConfiguration());
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelInstructionConfiguration());
            modelBuilder.Configurations.Add(new VSalesPersonConfiguration());
            modelBuilder.Configurations.Add(new VSalesPersonSalesByFiscalYearConfiguration());
            modelBuilder.Configurations.Add(new VStateProvinceCountryRegionConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithAddressConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithContactConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithDemographicConfiguration());
            modelBuilder.Configurations.Add(new VVendorWithAddressConfiguration());
            modelBuilder.Configurations.Add(new VVendorWithContactConfiguration());
            modelBuilder.Configurations.Add(new WorkOrderConfiguration());
            modelBuilder.Configurations.Add(new WorkOrderRoutingConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new BillOfMaterialConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessEntityConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessEntityAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new BusinessEntityContactConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionCurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new CultureConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyRateConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeePayHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new IllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new JobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonCreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCostHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductListPriceHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelIllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionCultureConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductSubcategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new PurchaseOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new PurchaseOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderSalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesPersonQuotaHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTaxRateConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTerritoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTerritoryHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new ShiftConfiguration(schema));
            modelBuilder.Configurations.Add(new ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new ShoppingCartItemConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new StoreConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionHistoryArchiveConfiguration(schema));
            modelBuilder.Configurations.Add(new UnitMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new VAdditionalContactInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeDepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new VendorConfiguration(schema));
            modelBuilder.Configurations.Add(new VIndividualCustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateEducationConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateEmploymentConfiguration(schema));
            modelBuilder.Configurations.Add(new VPersonDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesPersonSalesByFiscalYearConfiguration(schema));
            modelBuilder.Configurations.Add(new VStateProvinceCountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new VVendorWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new VVendorWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkOrderRoutingConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class FakeAdventureWorksDataContext : IAdventureWorksDataContext
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; }
        public System.Data.Entity.DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public System.Data.Entity.DbSet<BusinessEntity> BusinessEntities { get; set; }
        public System.Data.Entity.DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; }
        public System.Data.Entity.DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; }
        public System.Data.Entity.DbSet<ContactType> ContactTypes { get; set; }
        public System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; }
        public System.Data.Entity.DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        public System.Data.Entity.DbSet<CreditCard> CreditCards { get; set; }
        public System.Data.Entity.DbSet<Culture> Cultures { get; set; }
        public System.Data.Entity.DbSet<Currency> Currencies { get; set; }
        public System.Data.Entity.DbSet<CurrencyRate> CurrencyRates { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; }
        public System.Data.Entity.DbSet<Illustration> Illustrations { get; set; }
        public System.Data.Entity.DbSet<JobCandidate> JobCandidates { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<Password> Passwords { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<PersonCreditCard> PersonCreditCards { get; set; }
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; }
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; }
        public System.Data.Entity.DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public System.Data.Entity.DbSet<ProductDescription> ProductDescriptions { get; set; }
        public System.Data.Entity.DbSet<ProductDocument> ProductDocuments { get; set; }
        public System.Data.Entity.DbSet<ProductInventory> ProductInventories { get; set; }
        public System.Data.Entity.DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public System.Data.Entity.DbSet<ProductModel> ProductModels { get; set; }
        public System.Data.Entity.DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }
        public System.Data.Entity.DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public System.Data.Entity.DbSet<ProductPhoto> ProductPhotoes { get; set; }
        public System.Data.Entity.DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; }
        public System.Data.Entity.DbSet<ProductReview> ProductReviews { get; set; }
        public System.Data.Entity.DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public System.Data.Entity.DbSet<ProductVendor> ProductVendors { get; set; }
        public System.Data.Entity.DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public System.Data.Entity.DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public System.Data.Entity.DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        public System.Data.Entity.DbSet<SalesPerson> SalesPersons { get; set; }
        public System.Data.Entity.DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public System.Data.Entity.DbSet<SalesReason> SalesReasons { get; set; }
        public System.Data.Entity.DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public System.Data.Entity.DbSet<SalesTerritory> SalesTerritories { get; set; }
        public System.Data.Entity.DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public System.Data.Entity.DbSet<ScrapReason> ScrapReasons { get; set; }
        public System.Data.Entity.DbSet<Shift> Shifts { get; set; }
        public System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; }
        public System.Data.Entity.DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public System.Data.Entity.DbSet<SpecialOffer> SpecialOffers { get; set; }
        public System.Data.Entity.DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; }
        public System.Data.Entity.DbSet<Store> Stores { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TransactionHistory> TransactionHistories { get; set; }
        public System.Data.Entity.DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public System.Data.Entity.DbSet<UnitMeasure> UnitMeasures { get; set; }
        public System.Data.Entity.DbSet<VAdditionalContactInfo> VAdditionalContactInfoes { get; set; }
        public System.Data.Entity.DbSet<VEmployee> VEmployees { get; set; }
        public System.Data.Entity.DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; }
        public System.Data.Entity.DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<Vendor> Vendors { get; set; }
        public System.Data.Entity.DbSet<VIndividualCustomer> VIndividualCustomers { get; set; }
        public System.Data.Entity.DbSet<VJobCandidate> VJobCandidates { get; set; }
        public System.Data.Entity.DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; }
        public System.Data.Entity.DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; }
        public System.Data.Entity.DbSet<VPersonDemographic> VPersonDemographics { get; set; }
        public System.Data.Entity.DbSet<VProductAndDescription> VProductAndDescriptions { get; set; }
        public System.Data.Entity.DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; }
        public System.Data.Entity.DbSet<VProductModelInstruction> VProductModelInstructions { get; set; }
        public System.Data.Entity.DbSet<VSalesPerson> VSalesPersons { get; set; }
        public System.Data.Entity.DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; }
        public System.Data.Entity.DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; }
        public System.Data.Entity.DbSet<VStoreWithAddress> VStoreWithAddresses { get; set; }
        public System.Data.Entity.DbSet<VStoreWithContact> VStoreWithContacts { get; set; }
        public System.Data.Entity.DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; }
        public System.Data.Entity.DbSet<VVendorWithAddress> VVendorWithAddresses { get; set; }
        public System.Data.Entity.DbSet<VVendorWithContact> VVendorWithContacts { get; set; }
        public System.Data.Entity.DbSet<WorkOrder> WorkOrders { get; set; }
        public System.Data.Entity.DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }

        public FakeAdventureWorksDataContext()
        {
            Addresses = new FakeDbSet<Address>("AddressId");
            AddressTypes = new FakeDbSet<AddressType>("AddressTypeId");
            AwBuildVersions = new FakeDbSet<AwBuildVersion>("SystemInformationId");
            BillOfMaterials = new FakeDbSet<BillOfMaterial>("BillOfMaterialsId");
            BusinessEntities = new FakeDbSet<BusinessEntity>("BusinessEntityId");
            BusinessEntityAddresses = new FakeDbSet<BusinessEntityAddress>("BusinessEntityId", "AddressId", "AddressTypeId");
            BusinessEntityContacts = new FakeDbSet<BusinessEntityContact>("BusinessEntityId", "PersonId", "ContactTypeId");
            ContactTypes = new FakeDbSet<ContactType>("ContactTypeId");
            CountryRegions = new FakeDbSet<CountryRegion>("CountryRegionCode");
            CountryRegionCurrencies = new FakeDbSet<CountryRegionCurrency>("CountryRegionCode", "CurrencyCode");
            CreditCards = new FakeDbSet<CreditCard>("CreditCardId");
            Cultures = new FakeDbSet<Culture>("CultureId");
            Currencies = new FakeDbSet<Currency>("CurrencyCode");
            CurrencyRates = new FakeDbSet<CurrencyRate>("CurrencyRateId");
            Customers = new FakeDbSet<Customer>("CustomerId");
            DatabaseLogs = new FakeDbSet<DatabaseLog>("DatabaseLogId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Documents = new FakeDbSet<Document>("DocumentNode");
            EmailAddresses = new FakeDbSet<EmailAddress>("BusinessEntityId", "EmailAddressId");
            Employees = new FakeDbSet<Employee>("BusinessEntityId");
            EmployeeDepartmentHistories = new FakeDbSet<EmployeeDepartmentHistory>("BusinessEntityId", "StartDate", "DepartmentId", "ShiftId");
            EmployeePayHistories = new FakeDbSet<EmployeePayHistory>("BusinessEntityId", "RateChangeDate");
            ErrorLogs = new FakeDbSet<ErrorLog>("ErrorLogId");
            Illustrations = new FakeDbSet<Illustration>("IllustrationId");
            JobCandidates = new FakeDbSet<JobCandidate>("JobCandidateId");
            Locations = new FakeDbSet<Location>("LocationId");
            Passwords = new FakeDbSet<Password>("BusinessEntityId");
            People = new FakeDbSet<Person>("BusinessEntityId");
            PersonCreditCards = new FakeDbSet<PersonCreditCard>("BusinessEntityId", "CreditCardId");
            PersonPhones = new FakeDbSet<PersonPhone>("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");
            PhoneNumberTypes = new FakeDbSet<PhoneNumberType>("PhoneNumberTypeId");
            Products = new FakeDbSet<Product>("ProductId");
            ProductCategories = new FakeDbSet<ProductCategory>("ProductCategoryId");
            ProductCostHistories = new FakeDbSet<ProductCostHistory>("ProductId", "StartDate");
            ProductDescriptions = new FakeDbSet<ProductDescription>("ProductDescriptionId");
            ProductDocuments = new FakeDbSet<ProductDocument>("ProductId", "DocumentNode");
            ProductInventories = new FakeDbSet<ProductInventory>("ProductId", "LocationId");
            ProductListPriceHistories = new FakeDbSet<ProductListPriceHistory>("ProductId", "StartDate");
            ProductModels = new FakeDbSet<ProductModel>("ProductModelId");
            ProductModelIllustrations = new FakeDbSet<ProductModelIllustration>("ProductModelId", "IllustrationId");
            ProductModelProductDescriptionCultures = new FakeDbSet<ProductModelProductDescriptionCulture>("ProductModelId", "ProductDescriptionId", "CultureId");
            ProductPhotoes = new FakeDbSet<ProductPhoto>("ProductPhotoId");
            ProductProductPhotoes = new FakeDbSet<ProductProductPhoto>("ProductId", "ProductPhotoId");
            ProductReviews = new FakeDbSet<ProductReview>("ProductReviewId");
            ProductSubcategories = new FakeDbSet<ProductSubcategory>("ProductSubcategoryId");
            ProductVendors = new FakeDbSet<ProductVendor>("ProductId", "BusinessEntityId");
            PurchaseOrderDetails = new FakeDbSet<PurchaseOrderDetail>("PurchaseOrderId", "PurchaseOrderDetailId");
            PurchaseOrderHeaders = new FakeDbSet<PurchaseOrderHeader>("PurchaseOrderId");
            SalesOrderDetails = new FakeDbSet<SalesOrderDetail>("SalesOrderId", "SalesOrderDetailId");
            SalesOrderHeaders = new FakeDbSet<SalesOrderHeader>("SalesOrderId");
            SalesOrderHeaderSalesReasons = new FakeDbSet<SalesOrderHeaderSalesReason>("SalesOrderId", "SalesReasonId");
            SalesPersons = new FakeDbSet<SalesPerson>("BusinessEntityId");
            SalesPersonQuotaHistories = new FakeDbSet<SalesPersonQuotaHistory>("BusinessEntityId", "QuotaDate");
            SalesReasons = new FakeDbSet<SalesReason>("SalesReasonId");
            SalesTaxRates = new FakeDbSet<SalesTaxRate>("SalesTaxRateId");
            SalesTerritories = new FakeDbSet<SalesTerritory>("TerritoryId");
            SalesTerritoryHistories = new FakeDbSet<SalesTerritoryHistory>("BusinessEntityId", "StartDate", "TerritoryId");
            ScrapReasons = new FakeDbSet<ScrapReason>("ScrapReasonId");
            Shifts = new FakeDbSet<Shift>("ShiftId");
            ShipMethods = new FakeDbSet<ShipMethod>("ShipMethodId");
            ShoppingCartItems = new FakeDbSet<ShoppingCartItem>("ShoppingCartItemId");
            SpecialOffers = new FakeDbSet<SpecialOffer>("SpecialOfferId");
            SpecialOfferProducts = new FakeDbSet<SpecialOfferProduct>("SpecialOfferId", "ProductId");
            StateProvinces = new FakeDbSet<StateProvince>("StateProvinceId");
            Stores = new FakeDbSet<Store>("BusinessEntityId");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TransactionHistories = new FakeDbSet<TransactionHistory>("TransactionId");
            TransactionHistoryArchives = new FakeDbSet<TransactionHistoryArchive>("TransactionId");
            UnitMeasures = new FakeDbSet<UnitMeasure>("UnitMeasureCode");
            VAdditionalContactInfoes = new FakeDbSet<VAdditionalContactInfo>("BusinessEntityId", "FirstName", "LastName", "Rowguid", "ModifiedDate");
            VEmployees = new FakeDbSet<VEmployee>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "EmailPromotion", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VEmployeeDepartments = new FakeDbSet<VEmployeeDepartment>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "Department", "GroupName", "StartDate");
            VEmployeeDepartmentHistories = new FakeDbSet<VEmployeeDepartmentHistory>("BusinessEntityId", "FirstName", "LastName", "Shift", "Department", "GroupName", "StartDate");
            Vendors = new FakeDbSet<Vendor>("BusinessEntityId");
            VIndividualCustomers = new FakeDbSet<VIndividualCustomer>("BusinessEntityId", "FirstName", "LastName", "EmailPromotion", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VJobCandidates = new FakeDbSet<VJobCandidate>("JobCandidateId", "ModifiedDate");
            VJobCandidateEducations = new FakeDbSet<VJobCandidateEducation>("JobCandidateId");
            VJobCandidateEmployments = new FakeDbSet<VJobCandidateEmployment>("JobCandidateId");
            VPersonDemographics = new FakeDbSet<VPersonDemographic>("BusinessEntityId");
            VProductAndDescriptions = new FakeDbSet<VProductAndDescription>("ProductId", "Name", "ProductModel", "CultureId", "Description");
            VProductModelCatalogDescriptions = new FakeDbSet<VProductModelCatalogDescription>("ProductModelId", "Name", "Rowguid", "ModifiedDate");
            VProductModelInstructions = new FakeDbSet<VProductModelInstruction>("ProductModelId", "Name", "Rowguid", "ModifiedDate");
            VSalesPersons = new FakeDbSet<VSalesPerson>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "EmailPromotion", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName", "SalesYtd", "SalesLastYear");
            VSalesPersonSalesByFiscalYears = new FakeDbSet<VSalesPersonSalesByFiscalYear>("JobTitle", "SalesTerritory");
            VStateProvinceCountryRegions = new FakeDbSet<VStateProvinceCountryRegion>("StateProvinceId", "StateProvinceCode", "IsOnlyStateProvinceFlag", "StateProvinceName", "TerritoryId", "CountryRegionCode", "CountryRegionName");
            VStoreWithAddresses = new FakeDbSet<VStoreWithAddress>("BusinessEntityId", "Name", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VStoreWithContacts = new FakeDbSet<VStoreWithContact>("BusinessEntityId", "Name", "ContactType", "FirstName", "LastName", "EmailPromotion");
            VStoreWithDemographics = new FakeDbSet<VStoreWithDemographic>("BusinessEntityId", "Name");
            VVendorWithAddresses = new FakeDbSet<VVendorWithAddress>("BusinessEntityId", "Name", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            VVendorWithContacts = new FakeDbSet<VVendorWithContact>("BusinessEntityId", "Name", "ContactType", "FirstName", "LastName", "EmailPromotion");
            WorkOrders = new FakeDbSet<WorkOrder>("WorkOrderId");
            WorkOrderRoutings = new FakeDbSet<WorkOrderRouting>("WorkOrderId", "ProductId", "OperationSequence");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Address
    {

        ///<summary>
        /// Primary key for Address records.
        ///</summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// First street address line.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)

        ///<summary>
        /// Second street address line.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        ///<summary>
        /// Name of the city.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// Unique identification number for the state or province. Foreign key to StateProvince table.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// Postal code for the street address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 15)

        ///<summary>
        /// Latitude and longitude of this address.
        ///</summary>
        public System.Data.Entity.Spatial.DbGeography SpatialLocation { get; set; } // SpatialLocation

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<BusinessEntityAddress> BusinessEntityAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> BillToAddress { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillToAddressID
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> ShipToAddress { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipToAddressID

        // Foreign keys
        public virtual StateProvince StateProvince { get; set; } // FK_Address_StateProvince_StateProvinceID

        public Address()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            BusinessEntityAddresses = new System.Collections.Generic.List<BusinessEntityAddress>();
            BillToAddress = new System.Collections.Generic.List<SalesOrderHeader>();
            ShipToAddress = new System.Collections.Generic.List<SalesOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class AddressType
    {

        ///<summary>
        /// Primary key for AddressType records.
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// Address type description. For example, Billing, Home, or Shipping.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<BusinessEntityAddress> BusinessEntityAddresses { get; set; } // Many to many mapping

        public AddressType()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            BusinessEntityAddresses = new System.Collections.Generic.List<BusinessEntityAddress>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // AWBuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class AwBuildVersion
    {

        ///<summary>
        /// Primary key for AWBuildVersion records.
        ///</summary>
        public byte SystemInformationId { get; set; } // SystemInformationID (Primary key)

        ///<summary>
        /// Version number of the database in 9.yy.mm.dd.00 format.
        ///</summary>
        public string DatabaseVersion { get; set; } // Database Version (length: 25)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime VersionDate { get; set; } // VersionDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public AwBuildVersion()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // BillOfMaterials
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BillOfMaterial
    {

        ///<summary>
        /// Primary key for BillOfMaterials records.
        ///</summary>
        public int BillOfMaterialsId { get; set; } // BillOfMaterialsID (Primary key)

        ///<summary>
        /// Parent product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int? ProductAssemblyId { get; set; } // ProductAssemblyID

        ///<summary>
        /// Component identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ComponentId { get; set; } // ComponentID

        ///<summary>
        /// Date the component started being used in the assembly item.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Date the component stopped being used in the assembly item.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Standard code identifying the unit of measure for the quantity.
        ///</summary>
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Indicates the depth the component is from its parent (AssemblyID).
        ///</summary>
        public short BomLevel { get; set; } // BOMLevel

        ///<summary>
        /// Quantity of the component needed to create the assembly.
        ///</summary>
        public decimal PerAssemblyQty { get; set; } // PerAssemblyQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Component { get; set; } // FK_BillOfMaterials_Product_ComponentID
        public virtual Product ProductAssembly { get; set; } // FK_BillOfMaterials_Product_ProductAssemblyID
        public virtual UnitMeasure UnitMeasure { get; set; } // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode

        public BillOfMaterial()
        {
            StartDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // BusinessEntity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BusinessEntity
    {

        ///<summary>
        /// Primary key for all customers, vendors, and employees.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual Person Person { get; set; } // Person.FK_Person_BusinessEntity_BusinessEntityID
        public virtual Store Store { get; set; } // Store.FK_Store_BusinessEntity_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<BusinessEntityAddress> BusinessEntityAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<BusinessEntityContact> BusinessEntityContacts { get; set; } // Many to many mapping
        public virtual Vendor Vendor { get; set; } // Vendor.FK_Vendor_BusinessEntity_BusinessEntityID

        public BusinessEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            BusinessEntityAddresses = new System.Collections.Generic.List<BusinessEntityAddress>();
            BusinessEntityContacts = new System.Collections.Generic.List<BusinessEntityContact>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // BusinessEntityAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BusinessEntityAddress
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Address.AddressID.
        ///</summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to AddressType.AddressTypeID.
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Address Address { get; set; } // FK_BusinessEntityAddress_Address_AddressID
        public virtual AddressType AddressType { get; set; } // FK_BusinessEntityAddress_AddressType_AddressTypeID
        public virtual BusinessEntity BusinessEntity { get; set; } // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID

        public BusinessEntityAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // BusinessEntityContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BusinessEntityContact
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int PersonId { get; set; } // PersonID (Primary key)

        ///<summary>
        /// Primary key.  Foreign key to ContactType.ContactTypeID.
        ///</summary>
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual BusinessEntity BusinessEntity { get; set; } // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
        public virtual ContactType ContactType { get; set; } // FK_BusinessEntityContact_ContactType_ContactTypeID
        public virtual Person Person { get; set; } // FK_BusinessEntityContact_Person_PersonID

        public BusinessEntityContact()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ContactType
    {

        ///<summary>
        /// Primary key for ContactType records.
        ///</summary>
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// Contact type description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<BusinessEntityContact> BusinessEntityContacts { get; set; } // Many to many mapping

        public ContactType()
        {
            ModifiedDate = System.DateTime.Now;
            BusinessEntityContacts = new System.Collections.Generic.List<BusinessEntityContact>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CountryRegion
    {

        ///<summary>
        /// ISO standard code for countries and regions.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// Country or region name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory.FK_SalesTerritory_CountryRegion_CountryRegionCode
        public virtual System.Collections.Generic.ICollection<StateProvince> StateProvinces { get; set; } // StateProvince.FK_StateProvince_CountryRegion_CountryRegionCode

        public CountryRegion()
        {
            ModifiedDate = System.DateTime.Now;
            CountryRegionCurrencies = new System.Collections.Generic.List<CountryRegionCurrency>();
            SalesTerritories = new System.Collections.Generic.List<SalesTerritory>();
            StateProvinces = new System.Collections.Generic.List<StateProvince>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CountryRegionCurrency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CountryRegionCurrency
    {

        ///<summary>
        /// ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// ISO standard currency code. Foreign key to Currency.CurrencyCode.
        ///</summary>
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual CountryRegion CountryRegion { get; set; } // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
        public virtual Currency Currency { get; set; } // FK_CountryRegionCurrency_Currency_CurrencyCode

        public CountryRegionCurrency()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CreditCard
    {

        ///<summary>
        /// Primary key for CreditCard records.
        ///</summary>
        public int CreditCardId { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Credit card name.
        ///</summary>
        public string CardType { get; set; } // CardType (length: 50)

        ///<summary>
        /// Credit card number.
        ///</summary>
        public string CardNumber { get; set; } // CardNumber (length: 25)

        ///<summary>
        /// Credit card expiration month.
        ///</summary>
        public byte ExpMonth { get; set; } // ExpMonth

        ///<summary>
        /// Credit card expiration year.
        ///</summary>
        public short ExpYear { get; set; } // ExpYear

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonCreditCard> PersonCreditCards { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CreditCard_CreditCardID

        public CreditCard()
        {
            ModifiedDate = System.DateTime.Now;
            PersonCreditCards = new System.Collections.Generic.List<PersonCreditCard>();
            SalesOrderHeaders = new System.Collections.Generic.List<SalesOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Culture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Culture
    {

        ///<summary>
        /// Primary key for Culture records.
        ///</summary>
        public string CultureId { get; set; } // CultureID (Primary key) (length: 6)

        ///<summary>
        /// Culture description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // Many to many mapping

        public Culture()
        {
            ModifiedDate = System.DateTime.Now;
            ProductModelProductDescriptionCultures = new System.Collections.Generic.List<ProductModelProductDescriptionCulture>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Currency
    {

        ///<summary>
        /// The ISO code for the Currency.
        ///</summary>
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Currency name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<CurrencyRate> FromCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_FromCurrencyCode
        public virtual System.Collections.Generic.ICollection<CurrencyRate> ToCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_ToCurrencyCode

        public Currency()
        {
            ModifiedDate = System.DateTime.Now;
            CountryRegionCurrencies = new System.Collections.Generic.List<CountryRegionCurrency>();
            FromCurrencyCode = new System.Collections.Generic.List<CurrencyRate>();
            ToCurrencyCode = new System.Collections.Generic.List<CurrencyRate>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CurrencyRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CurrencyRate
    {

        ///<summary>
        /// Primary key for CurrencyRate records.
        ///</summary>
        public int CurrencyRateId { get; set; } // CurrencyRateID (Primary key)

        ///<summary>
        /// Date and time the exchange rate was obtained.
        ///</summary>
        public System.DateTime CurrencyRateDate { get; set; } // CurrencyRateDate

        ///<summary>
        /// Exchange rate was converted from this currency code.
        ///</summary>
        public string FromCurrencyCode { get; set; } // FromCurrencyCode (length: 3)

        ///<summary>
        /// Exchange rate was converted to this currency code.
        ///</summary>
        public string ToCurrencyCode { get; set; } // ToCurrencyCode (length: 3)

        ///<summary>
        /// Average exchange rate for the day.
        ///</summary>
        public decimal AverageRate { get; set; } // AverageRate

        ///<summary>
        /// Final exchange rate for the day.
        ///</summary>
        public decimal EndOfDayRate { get; set; } // EndOfDayRate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        // Foreign keys
        public virtual Currency Currency_FromCurrencyCode { get; set; } // FK_CurrencyRate_Currency_FromCurrencyCode
        public virtual Currency Currency_ToCurrencyCode { get; set; } // FK_CurrencyRate_Currency_ToCurrencyCode

        public CurrencyRate()
        {
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaders = new System.Collections.Generic.List<SalesOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Customer
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int CustomerId { get; set; } // CustomerID (Primary key)

        ///<summary>
        /// Foreign key to Person.BusinessEntityID
        ///</summary>
        public int? PersonId { get; set; } // PersonID

        ///<summary>
        /// Foreign key to Store.BusinessEntityID
        ///</summary>
        public int? StoreId { get; set; } // StoreID

        ///<summary>
        /// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Unique number identifying the customer assigned by the accounting system.
        ///</summary>
        public string AccountNumber { get; private set; } // AccountNumber (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        // Foreign keys
        public virtual Person Person { get; set; } // FK_Customer_Person_PersonID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_Customer_SalesTerritory_TerritoryID
        public virtual Store Store { get; set; } // FK_Customer_Store_StoreID

        public Customer()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaders = new System.Collections.Generic.List<SalesOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DatabaseLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class DatabaseLog
    {

        ///<summary>
        /// Primary key for DatabaseLog records.
        ///</summary>
        public int DatabaseLogId { get; set; } // DatabaseLogID (Primary key)

        ///<summary>
        /// The date and time the DDL change occurred.
        ///</summary>
        public System.DateTime PostTime { get; set; } // PostTime

        ///<summary>
        /// The user who implemented the DDL change.
        ///</summary>
        public string DatabaseUser { get; set; } // DatabaseUser (length: 128)

        ///<summary>
        /// The type of DDL statement that was executed.
        ///</summary>
        public string Event { get; set; } // Event (length: 128)

        ///<summary>
        /// The schema to which the changed object belongs.
        ///</summary>
        public string Schema { get; set; } // Schema (length: 128)

        ///<summary>
        /// The object that was changed by the DDL statment.
        ///</summary>
        public string Object { get; set; } // Object (length: 128)

        ///<summary>
        /// The exact Transact-SQL statement that was executed.
        ///</summary>
        public string Tsql { get; set; } // TSQL

        ///<summary>
        /// The raw XML data generated by database trigger.
        ///</summary>
        public string XmlEvent { get; set; } // XmlEvent

        public DatabaseLog()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Department
    {

        ///<summary>
        /// Primary key for Department records.
        ///</summary>
        public short DepartmentId { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Name of the department.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Name of the group to which the department belongs.
        ///</summary>
        public string GroupName { get; set; } // GroupName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // Many to many mapping

        public Department()
        {
            ModifiedDate = System.DateTime.Now;
            EmployeeDepartmentHistories = new System.Collections.Generic.List<EmployeeDepartmentHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Document
    {

        ///<summary>
        /// Primary key for Document records.
        ///</summary>
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Depth in the document hierarchy.
        ///</summary>
        public short? DocumentLevel { get; private set; } // DocumentLevel

        ///<summary>
        /// Title of the document.
        ///</summary>
        public string Title { get; set; } // Title (length: 50)

        ///<summary>
        /// Employee who controls the document.  Foreign key to Employee.BusinessEntityID
        ///</summary>
        public int Owner { get; set; } // Owner

        ///<summary>
        /// 0 = This is a folder, 1 = This is a document.
        ///</summary>
        public bool FolderFlag { get; set; } // FolderFlag

        ///<summary>
        /// File name of the document
        ///</summary>
        public string FileName { get; set; } // FileName (length: 400)

        ///<summary>
        /// File extension indicating the document type. For example, .doc or .txt.
        ///</summary>
        public string FileExtension { get; set; } // FileExtension (length: 8)

        ///<summary>
        /// Revision number of the document.
        ///</summary>
        public string Revision { get; set; } // Revision (length: 5)

        ///<summary>
        /// Engineering change approval number.
        ///</summary>
        public int ChangeNumber { get; set; } // ChangeNumber

        ///<summary>
        /// 1 = Pending approval, 2 = Approved, 3 = Obsolete
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// Document abstract.
        ///</summary>
        public string DocumentSummary { get; set; } // DocumentSummary

        ///<summary>
        /// Complete document.
        ///</summary>
        public byte[] Document_ { get; set; } // Document

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductDocument> ProductDocuments { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_Document_Employee_Owner

        public Document()
        {
            FolderFlag = false;
            ChangeNumber = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ProductDocuments = new System.Collections.Generic.List<ProductDocument>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmailAddress
    {

        ///<summary>
        /// Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. ID of this email address.
        ///</summary>
        public int EmailAddressId { get; set; } // EmailAddressID (Primary key)

        ///<summary>
        /// E-mail address for the person.
        ///</summary>
        public string EmailAddress_ { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person Person { get; set; } // FK_EmailAddress_Person_BusinessEntityID

        public EmailAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Employee
    {

        ///<summary>
        /// Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Unique national identification number such as a social security number.
        ///</summary>
        public string NationalIdNumber { get; set; } // NationalIDNumber (length: 15)

        ///<summary>
        /// Network login.
        ///</summary>
        public string LoginId { get; set; } // LoginID (length: 256)

        ///<summary>
        /// Where the employee is located in corporate hierarchy.
        ///</summary>
        public System.Data.Entity.Hierarchy.HierarchyId OrganizationNode { get; set; } // OrganizationNode

        ///<summary>
        /// The depth of the employee in the corporate hierarchy.
        ///</summary>
        public short? OrganizationLevel { get; private set; } // OrganizationLevel

        ///<summary>
        /// Work title such as Buyer or Sales Representative.
        ///</summary>
        public string JobTitle { get; set; } // JobTitle (length: 50)

        ///<summary>
        /// Date of birth.
        ///</summary>
        public System.DateTime BirthDate { get; set; } // BirthDate

        ///<summary>
        /// M = Married, S = Single
        ///</summary>
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)

        ///<summary>
        /// M = Male, F = Female
        ///</summary>
        public string Gender { get; set; } // Gender (length: 1)

        ///<summary>
        /// Employee hired on this date.
        ///</summary>
        public System.DateTime HireDate { get; set; } // HireDate

        ///<summary>
        /// Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
        ///</summary>
        public bool SalariedFlag { get; set; } // SalariedFlag

        ///<summary>
        /// Number of available vacation hours.
        ///</summary>
        public short VacationHours { get; set; } // VacationHours

        ///<summary>
        /// Number of available sick leave hours.
        ///</summary>
        public short SickLeaveHours { get; set; } // SickLeaveHours

        ///<summary>
        /// 0 = Inactive, 1 = Active
        ///</summary>
        public bool CurrentFlag { get; set; } // CurrentFlag

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual SalesPerson SalesPerson { get; set; } // SalesPerson.FK_SalesPerson_Employee_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<Document> Documents { get; set; } // Document.FK_Document_Employee_Owner
        public virtual System.Collections.Generic.ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<EmployeePayHistory> EmployeePayHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<JobCandidate> JobCandidates { get; set; } // JobCandidate.FK_JobCandidate_Employee_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Employee_EmployeeID

        // Foreign keys
        public virtual Person Person { get; set; } // FK_Employee_Person_BusinessEntityID

        public Employee()
        {
            SalariedFlag = true;
            VacationHours = 0;
            SickLeaveHours = 0;
            CurrentFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Documents = new System.Collections.Generic.List<Document>();
            EmployeeDepartmentHistories = new System.Collections.Generic.List<EmployeeDepartmentHistory>();
            EmployeePayHistories = new System.Collections.Generic.List<EmployeePayHistory>();
            JobCandidates = new System.Collections.Generic.List<JobCandidate>();
            PurchaseOrderHeaders = new System.Collections.Generic.List<PurchaseOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmployeeDepartmentHistory
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
        ///</summary>
        public short DepartmentId { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
        ///</summary>
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Date the employee started work in the department.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the employee left the department. NULL = Current department.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Department Department { get; set; } // FK_EmployeeDepartmentHistory_Department_DepartmentID
        public virtual Employee Employee { get; set; } // FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
        public virtual Shift Shift { get; set; } // FK_EmployeeDepartmentHistory_Shift_ShiftID

        public EmployeeDepartmentHistory()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EmployeePayHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmployeePayHistory
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Date the change in pay is effective
        ///</summary>
        public System.DateTime RateChangeDate { get; set; } // RateChangeDate (Primary key)

        ///<summary>
        /// Salary hourly rate.
        ///</summary>
        public decimal Rate { get; set; } // Rate

        ///<summary>
        /// 1 = Salary received monthly, 2 = Salary received biweekly
        ///</summary>
        public byte PayFrequency { get; set; } // PayFrequency

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_EmployeePayHistory_Employee_BusinessEntityID

        public EmployeePayHistory()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ErrorLog
    {

        ///<summary>
        /// Primary key for ErrorLog records.
        ///</summary>
        public int ErrorLogId { get; set; } // ErrorLogID (Primary key)

        ///<summary>
        /// The date and time at which the error occurred.
        ///</summary>
        public System.DateTime ErrorTime { get; set; } // ErrorTime

        ///<summary>
        /// The user who executed the batch in which the error occurred.
        ///</summary>
        public string UserName { get; set; } // UserName (length: 128)

        ///<summary>
        /// The error number of the error that occurred.
        ///</summary>
        public int ErrorNumber { get; set; } // ErrorNumber

        ///<summary>
        /// The severity of the error that occurred.
        ///</summary>
        public int? ErrorSeverity { get; set; } // ErrorSeverity

        ///<summary>
        /// The state number of the error that occurred.
        ///</summary>
        public int? ErrorState { get; set; } // ErrorState

        ///<summary>
        /// The name of the stored procedure or trigger where the error occurred.
        ///</summary>
        public string ErrorProcedure { get; set; } // ErrorProcedure (length: 126)

        ///<summary>
        /// The line number at which the error occurred.
        ///</summary>
        public int? ErrorLine { get; set; } // ErrorLine

        ///<summary>
        /// The message text of the error that occurred.
        ///</summary>
        public string ErrorMessage { get; set; } // ErrorMessage (length: 4000)

        public ErrorLog()
        {
            ErrorTime = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Illustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Illustration
    {

        ///<summary>
        /// Primary key for Illustration records.
        ///</summary>
        public int IllustrationId { get; set; } // IllustrationID (Primary key)

        ///<summary>
        /// Illustrations used in manufacturing instructions. Stored as XML.
        ///</summary>
        public string Diagram { get; set; } // Diagram

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductModelIllustration> ProductModelIllustrations { get; set; } // Many to many mapping

        public Illustration()
        {
            ModifiedDate = System.DateTime.Now;
            ProductModelIllustrations = new System.Collections.Generic.List<ProductModelIllustration>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class JobCandidate
    {

        ///<summary>
        /// Primary key for JobCandidate records.
        ///</summary>
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key)

        ///<summary>
        /// Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int? BusinessEntityId { get; set; } // BusinessEntityID

        ///<summary>
        /// Résumé in XML format.
        ///</summary>
        public string Resume { get; set; } // Resume

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_JobCandidate_Employee_BusinessEntityID

        public JobCandidate()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Location
    {

        ///<summary>
        /// Primary key for Location records.
        ///</summary>
        public short LocationId { get; set; } // LocationID (Primary key)

        ///<summary>
        /// Location description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Standard hourly cost of the manufacturing location.
        ///</summary>
        public decimal CostRate { get; set; } // CostRate

        ///<summary>
        /// Work capacity (in hours) of the manufacturing location.
        ///</summary>
        public decimal Availability { get; set; } // Availability

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductInventory> ProductInventories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting.FK_WorkOrderRouting_Location_LocationID

        public Location()
        {
            ModifiedDate = System.DateTime.Now;
            ProductInventories = new System.Collections.Generic.List<ProductInventory>();
            WorkOrderRoutings = new System.Collections.Generic.List<WorkOrderRouting>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Password
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Password for the e-mail account.
        ///</summary>
        public string PasswordHash { get; set; } // PasswordHash (length: 128)

        ///<summary>
        /// Random value concatenated with the password string before the password is hashed.
        ///</summary>
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person Person { get; set; } // FK_Password_Person_BusinessEntityID

        public Password()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Person
    {

        ///<summary>
        /// Primary key for Person records.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact
        ///</summary>
        public string PersonType { get; set; } // PersonType (length: 2)

        ///<summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        ///</summary>
        public bool NameStyle { get; set; } // NameStyle

        ///<summary>
        /// A courtesy title. For example, Mr. or Ms.
        ///</summary>
        public string Title { get; set; } // Title (length: 8)

        ///<summary>
        /// First name of the person.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 50)

        ///<summary>
        /// Middle name or middle initial of the person.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 50)

        ///<summary>
        /// Last name of the person.
        ///</summary>
        public string LastName { get; set; } // LastName (length: 50)

        ///<summary>
        /// Surname suffix. For example, Sr. or Jr.
        ///</summary>
        public string Suffix { get; set; } // Suffix (length: 10)

        ///<summary>
        /// 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
        ///</summary>
        public int EmailPromotion { get; set; } // EmailPromotion

        ///<summary>
        /// Additional contact information about the person stored in xml format.
        ///</summary>
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo

        ///<summary>
        /// Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
        ///</summary>
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual Employee Employee { get; set; } // Employee.FK_Employee_Person_BusinessEntityID
        public virtual Password Password { get; set; } // Password.FK_Password_Person_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<BusinessEntityContact> BusinessEntityContacts { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Customer> Customers { get; set; } // Customer.FK_Customer_Person_PersonID
        public virtual System.Collections.Generic.ICollection<EmailAddress> EmailAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PersonCreditCard> PersonCreditCards { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PersonPhone> PersonPhones { get; set; } // Many to many mapping

        // Foreign keys
        public virtual BusinessEntity BusinessEntity { get; set; } // FK_Person_BusinessEntity_BusinessEntityID

        public Person()
        {
            NameStyle = false;
            EmailPromotion = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            BusinessEntityContacts = new System.Collections.Generic.List<BusinessEntityContact>();
            Customers = new System.Collections.Generic.List<Customer>();
            EmailAddresses = new System.Collections.Generic.List<EmailAddress>();
            PersonCreditCards = new System.Collections.Generic.List<PersonCreditCard>();
            PersonPhones = new System.Collections.Generic.List<PersonPhone>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PersonCreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PersonCreditCard
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        public int CreditCardId { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual CreditCard CreditCard { get; set; } // FK_PersonCreditCard_CreditCard_CreditCardID
        public virtual Person Person { get; set; } // FK_PersonCreditCard_Person_BusinessEntityID

        public PersonCreditCard()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PersonPhone
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Telephone number identification number.
        ///</summary>
        public string PhoneNumber { get; set; } // PhoneNumber (Primary key) (length: 25)

        ///<summary>
        /// Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
        ///</summary>
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person Person { get; set; } // FK_PersonPhone_Person_BusinessEntityID
        public virtual PhoneNumberType PhoneNumberType { get; set; } // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID

        public PersonPhone()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PhoneNumberType
    {

        ///<summary>
        /// Primary key for telephone number type records.
        ///</summary>
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Name of the telephone number type
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonPhone> PersonPhones { get; set; } // Many to many mapping

        public PhoneNumberType()
        {
            ModifiedDate = System.DateTime.Now;
            PersonPhones = new System.Collections.Generic.List<PersonPhone>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Product
    {

        ///<summary>
        /// Primary key for Product records.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Name of the product.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Unique product identification number.
        ///</summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 25)

        ///<summary>
        /// 0 = Product is purchased, 1 = Product is manufactured in-house.
        ///</summary>
        public bool MakeFlag { get; set; } // MakeFlag

        ///<summary>
        /// 0 = Product is not a salable item. 1 = Product is salable.
        ///</summary>
        public bool FinishedGoodsFlag { get; set; } // FinishedGoodsFlag

        ///<summary>
        /// Product color.
        ///</summary>
        public string Color { get; set; } // Color (length: 15)

        ///<summary>
        /// Minimum inventory quantity.
        ///</summary>
        public short SafetyStockLevel { get; set; } // SafetyStockLevel

        ///<summary>
        /// Inventory level that triggers a purchase order or work order.
        ///</summary>
        public short ReorderPoint { get; set; } // ReorderPoint

        ///<summary>
        /// Standard cost of the product.
        ///</summary>
        public decimal StandardCost { get; set; } // StandardCost

        ///<summary>
        /// Selling price.
        ///</summary>
        public decimal ListPrice { get; set; } // ListPrice

        ///<summary>
        /// Product size.
        ///</summary>
        public string Size { get; set; } // Size (length: 5)

        ///<summary>
        /// Unit of measure for Size column.
        ///</summary>
        public string SizeUnitMeasureCode { get; set; } // SizeUnitMeasureCode (length: 3)

        ///<summary>
        /// Unit of measure for Weight column.
        ///</summary>
        public string WeightUnitMeasureCode { get; set; } // WeightUnitMeasureCode (length: 3)

        ///<summary>
        /// Product weight.
        ///</summary>
        public decimal? Weight { get; set; } // Weight

        ///<summary>
        /// Number of days required to manufacture the product.
        ///</summary>
        public int DaysToManufacture { get; set; } // DaysToManufacture

        ///<summary>
        /// R = Road, M = Mountain, T = Touring, S = Standard
        ///</summary>
        public string ProductLine { get; set; } // ProductLine (length: 2)

        ///<summary>
        /// H = High, M = Medium, L = Low
        ///</summary>
        public string Class { get; set; } // Class (length: 2)

        ///<summary>
        /// W = Womens, M = Mens, U = Universal
        ///</summary>
        public string Style { get; set; } // Style (length: 2)

        ///<summary>
        /// Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
        ///</summary>
        public int? ProductSubcategoryId { get; set; } // ProductSubcategoryID

        ///<summary>
        /// Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        public int? ProductModelId { get; set; } // ProductModelID

        ///<summary>
        /// Date the product was available for sale.
        ///</summary>
        public System.DateTime SellStartDate { get; set; } // SellStartDate

        ///<summary>
        /// Date the product was no longer available for sale.
        ///</summary>
        public System.DateTime? SellEndDate { get; set; } // SellEndDate

        ///<summary>
        /// Date the product was discontinued.
        ///</summary>
        public System.DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<BillOfMaterial> Component { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ComponentID
        public virtual System.Collections.Generic.ICollection<BillOfMaterial> ProductAssembly { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ProductAssemblyID
        public virtual System.Collections.Generic.ICollection<ProductCostHistory> ProductCostHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<ProductDocument> ProductDocuments { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<ProductInventory> ProductInventories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<ProductListPriceHistory> ProductListPriceHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<ProductProductPhoto> ProductProductPhotoes { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<ProductReview> ProductReviews { get; set; } // ProductReview.FK_ProductReview_Product_ProductID
        public virtual System.Collections.Generic.ICollection<ProductVendor> ProductVendors { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail.FK_PurchaseOrderDetail_Product_ProductID
        public virtual System.Collections.Generic.ICollection<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem.FK_ShoppingCartItem_Product_ProductID
        public virtual System.Collections.Generic.ICollection<SpecialOfferProduct> SpecialOfferProducts { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory.FK_TransactionHistory_Product_ProductID
        public virtual System.Collections.Generic.ICollection<WorkOrder> WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_Product_ProductID

        // Foreign keys
        public virtual ProductModel ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID
        public virtual ProductSubcategory ProductSubcategory { get; set; } // FK_Product_ProductSubcategory_ProductSubcategoryID
        public virtual UnitMeasure UnitMeasure_SizeUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_SizeUnitMeasureCode
        public virtual UnitMeasure UnitMeasure_WeightUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_WeightUnitMeasureCode

        public Product()
        {
            MakeFlag = true;
            FinishedGoodsFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Component = new System.Collections.Generic.List<BillOfMaterial>();
            ProductAssembly = new System.Collections.Generic.List<BillOfMaterial>();
            ProductCostHistories = new System.Collections.Generic.List<ProductCostHistory>();
            ProductDocuments = new System.Collections.Generic.List<ProductDocument>();
            ProductInventories = new System.Collections.Generic.List<ProductInventory>();
            ProductListPriceHistories = new System.Collections.Generic.List<ProductListPriceHistory>();
            ProductProductPhotoes = new System.Collections.Generic.List<ProductProductPhoto>();
            ProductReviews = new System.Collections.Generic.List<ProductReview>();
            ProductVendors = new System.Collections.Generic.List<ProductVendor>();
            PurchaseOrderDetails = new System.Collections.Generic.List<PurchaseOrderDetail>();
            ShoppingCartItems = new System.Collections.Generic.List<ShoppingCartItem>();
            SpecialOfferProducts = new System.Collections.Generic.List<SpecialOfferProduct>();
            TransactionHistories = new System.Collections.Generic.List<TransactionHistory>();
            WorkOrders = new System.Collections.Generic.List<WorkOrder>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductCategory
    {

        ///<summary>
        /// Primary key for ProductCategory records.
        ///</summary>
        public int ProductCategoryId { get; set; } // ProductCategoryID (Primary key)

        ///<summary>
        /// Category description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory.FK_ProductSubcategory_ProductCategory_ProductCategoryID

        public ProductCategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ProductSubcategories = new System.Collections.Generic.List<ProductSubcategory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductCostHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductCostHistory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Product cost start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Product cost end date.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Standard cost of the product.
        ///</summary>
        public decimal StandardCost { get; set; } // StandardCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductCostHistory_Product_ProductID

        public ProductCostHistory()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductDescription
    {

        ///<summary>
        /// Primary key for ProductDescription records.
        ///</summary>
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)

        ///<summary>
        /// Description of the product.
        ///</summary>
        public string Description { get; set; } // Description (length: 400)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // Many to many mapping

        public ProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ProductModelProductDescriptionCultures = new System.Collections.Generic.List<ProductModelProductDescriptionCulture>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductDocument
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Document identification number. Foreign key to Document.DocumentNode.
        ///</summary>
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Document Document { get; set; } // FK_ProductDocument_Document_DocumentNode
        public virtual Product Product { get; set; } // FK_ProductDocument_Product_ProductID

        public ProductDocument()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductInventory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Inventory location identification number. Foreign key to Location.LocationID.
        ///</summary>
        public short LocationId { get; set; } // LocationID (Primary key)

        ///<summary>
        /// Storage compartment within an inventory location.
        ///</summary>
        public string Shelf { get; set; } // Shelf (length: 10)

        ///<summary>
        /// Storage container on a shelf in an inventory location.
        ///</summary>
        public byte Bin { get; set; } // Bin

        ///<summary>
        /// Quantity of products in the inventory location.
        ///</summary>
        public short Quantity { get; set; } // Quantity

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Location Location { get; set; } // FK_ProductInventory_Location_LocationID
        public virtual Product Product { get; set; } // FK_ProductInventory_Product_ProductID

        public ProductInventory()
        {
            Quantity = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductListPriceHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductListPriceHistory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// List price start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// List price end date
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Product list price.
        ///</summary>
        public decimal ListPrice { get; set; } // ListPrice

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductListPriceHistory_Product_ProductID

        public ProductListPriceHistory()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductModel
    {

        ///<summary>
        /// Primary key for ProductModel records.
        ///</summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Product model description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Detailed product catalog information in xml format.
        ///</summary>
        public string CatalogDescription { get; set; } // CatalogDescription

        ///<summary>
        /// Manufacturing instructions in xml format.
        ///</summary>
        public string Instructions { get; set; } // Instructions

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID
        public virtual System.Collections.Generic.ICollection<ProductModelIllustration> ProductModelIllustrations { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // Many to many mapping

        public ProductModel()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Products = new System.Collections.Generic.List<Product>();
            ProductModelIllustrations = new System.Collections.Generic.List<ProductModelIllustration>();
            ProductModelProductDescriptionCultures = new System.Collections.Generic.List<ProductModelProductDescriptionCulture>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductModelIllustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductModelIllustration
    {

        ///<summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Illustration.IllustrationID.
        ///</summary>
        public int IllustrationId { get; set; } // IllustrationID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Illustration Illustration { get; set; } // FK_ProductModelIllustration_Illustration_IllustrationID
        public virtual ProductModel ProductModel { get; set; } // FK_ProductModelIllustration_ProductModel_ProductModelID

        public ProductModelIllustration()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductModelProductDescriptionCulture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductModelProductDescriptionCulture
    {

        ///<summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to ProductDescription.ProductDescriptionID.
        ///</summary>
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)

        ///<summary>
        /// Culture identification number. Foreign key to Culture.CultureID.
        ///</summary>
        public string CultureId { get; set; } // CultureID (Primary key) (length: 6)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Culture Culture { get; set; } // FK_ProductModelProductDescriptionCulture_Culture_CultureID
        public virtual ProductDescription ProductDescription { get; set; } // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
        public virtual ProductModel ProductModel { get; set; } // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID

        public ProductModelProductDescriptionCulture()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductPhoto
    {

        ///<summary>
        /// Primary key for ProductPhoto records.
        ///</summary>
        public int ProductPhotoId { get; set; } // ProductPhotoID (Primary key)

        ///<summary>
        /// Small image of the product.
        ///</summary>
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto

        ///<summary>
        /// Small image file name.
        ///</summary>
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName (length: 50)

        ///<summary>
        /// Large image of the product.
        ///</summary>
        public byte[] LargePhoto { get; set; } // LargePhoto

        ///<summary>
        /// Large image file name.
        ///</summary>
        public string LargePhotoFileName { get; set; } // LargePhotoFileName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductProductPhoto> ProductProductPhotoes { get; set; } // Many to many mapping

        public ProductPhoto()
        {
            ModifiedDate = System.DateTime.Now;
            ProductProductPhotoes = new System.Collections.Generic.List<ProductProductPhoto>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductProductPhoto
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
        ///</summary>
        public int ProductPhotoId { get; set; } // ProductPhotoID (Primary key)

        ///<summary>
        /// 0 = Photo is not the principal image. 1 = Photo is the principal image.
        ///</summary>
        public bool Primary { get; set; } // Primary

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductProductPhoto_Product_ProductID
        public virtual ProductPhoto ProductPhoto { get; set; } // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID

        public ProductProductPhoto()
        {
            Primary = false;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductReview
    {

        ///<summary>
        /// Primary key for ProductReview records.
        ///</summary>
        public int ProductReviewId { get; set; } // ProductReviewID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Name of the reviewer.
        ///</summary>
        public string ReviewerName { get; set; } // ReviewerName (length: 50)

        ///<summary>
        /// Date review was submitted.
        ///</summary>
        public System.DateTime ReviewDate { get; set; } // ReviewDate

        ///<summary>
        /// Reviewer's e-mail address.
        ///</summary>
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
        ///</summary>
        public int Rating { get; set; } // Rating

        ///<summary>
        /// Reviewer's comments
        ///</summary>
        public string Comments { get; set; } // Comments (length: 3850)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductReview_Product_ProductID

        public ProductReview()
        {
            ReviewDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductSubcategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductSubcategory
    {

        ///<summary>
        /// Primary key for ProductSubcategory records.
        ///</summary>
        public int ProductSubcategoryId { get; set; } // ProductSubcategoryID (Primary key)

        ///<summary>
        /// Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
        ///</summary>
        public int ProductCategoryId { get; set; } // ProductCategoryID

        ///<summary>
        /// Subcategory description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Product.FK_Product_ProductSubcategory_ProductSubcategoryID

        // Foreign keys
        public virtual ProductCategory ProductCategory { get; set; } // FK_ProductSubcategory_ProductCategory_ProductCategoryID

        public ProductSubcategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Products = new System.Collections.Generic.List<Product>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductVendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductVendor
    {

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
        ///</summary>
        public int AverageLeadTime { get; set; } // AverageLeadTime

        ///<summary>
        /// The vendor's usual selling price.
        ///</summary>
        public decimal StandardPrice { get; set; } // StandardPrice

        ///<summary>
        /// The selling price when last purchased.
        ///</summary>
        public decimal? LastReceiptCost { get; set; } // LastReceiptCost

        ///<summary>
        /// Date the product was last received by the vendor.
        ///</summary>
        public System.DateTime? LastReceiptDate { get; set; } // LastReceiptDate

        ///<summary>
        /// The maximum quantity that should be ordered.
        ///</summary>
        public int MinOrderQty { get; set; } // MinOrderQty

        ///<summary>
        /// The minimum quantity that should be ordered.
        ///</summary>
        public int MaxOrderQty { get; set; } // MaxOrderQty

        ///<summary>
        /// The quantity currently on order.
        ///</summary>
        public int? OnOrderQty { get; set; } // OnOrderQty

        ///<summary>
        /// The product's unit of measure.
        ///</summary>
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductVendor_Product_ProductID
        public virtual UnitMeasure UnitMeasure { get; set; } // FK_ProductVendor_UnitMeasure_UnitMeasureCode
        public virtual Vendor Vendor { get; set; } // FK_ProductVendor_Vendor_BusinessEntityID

        public ProductVendor()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PurchaseOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PurchaseOrderDetail
    {

        ///<summary>
        /// Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
        ///</summary>
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Primary key. One line number per purchased product.
        ///</summary>
        public int PurchaseOrderDetailId { get; set; } // PurchaseOrderDetailID (Primary key)

        ///<summary>
        /// Date the product is expected to be received.
        ///</summary>
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Quantity ordered.
        ///</summary>
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Vendor's selling price of a single product.
        ///</summary>
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Per product subtotal. Computed as OrderQty * UnitPrice.
        ///</summary>
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// Quantity actually received from the vendor.
        ///</summary>
        public decimal ReceivedQty { get; set; } // ReceivedQty

        ///<summary>
        /// Quantity rejected during inspection.
        ///</summary>
        public decimal RejectedQty { get; set; } // RejectedQty

        ///<summary>
        /// Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
        ///</summary>
        public decimal StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_PurchaseOrderDetail_Product_ProductID
        public virtual PurchaseOrderHeader PurchaseOrderHeader { get; set; } // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID

        public PurchaseOrderDetail()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PurchaseOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PurchaseOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the purchase order over time.
        ///</summary>
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int EmployeeId { get; set; } // EmployeeID

        ///<summary>
        /// Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        public int VendorId { get; set; } // VendorID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Purchase order creation date.
        ///</summary>
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Estimated shipment date from the vendor.
        ///</summary>
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
        ///</summary>
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_PurchaseOrderHeader_Employee_EmployeeID
        public virtual ShipMethod ShipMethod { get; set; } // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        public virtual Vendor Vendor { get; set; } // FK_PurchaseOrderHeader_Vendor_VendorID

        public PurchaseOrderHeader()
        {
            RevisionNumber = 0;
            Status = 1;
            OrderDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            PurchaseOrderDetails = new System.Collections.Generic.List<PurchaseOrderDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesOrderDetail
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. One incremental unique number per product sold.
        ///</summary>
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key)

        ///<summary>
        /// Shipment tracking number supplied by the shipper.
        ///</summary>
        public string CarrierTrackingNumber { get; set; } // CarrierTrackingNumber (length: 25)

        ///<summary>
        /// Quantity ordered per product.
        ///</summary>
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product sold to customer. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Promotional code. Foreign key to SpecialOffer.SpecialOfferID.
        ///</summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID

        ///<summary>
        /// Selling price of a single product.
        ///</summary>
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Discount amount.
        ///</summary>
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount

        ///<summary>
        /// Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        ///</summary>
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual SalesOrderHeader SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        public virtual SpecialOfferProduct SpecialOfferProduct { get; set; } // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        public SalesOrderDetail()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the sales order over time.
        ///</summary>
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Dates the sales order was created.
        ///</summary>
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Date the order is due to the customer.
        ///</summary>
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Date the order was shipped to the customer.
        ///</summary>
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        ///</summary>
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag

        ///<summary>
        /// Unique sales order identification number.
        ///</summary>
        public string SalesOrderNumber { get; private set; } // SalesOrderNumber (length: 25)

        ///<summary>
        /// Customer purchase order number reference.
        ///</summary>
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber (length: 25)

        ///<summary>
        /// Financial accounting number reference.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        public int CustomerId { get; set; } // CustomerID

        ///<summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        ///</summary>
        public int BillToAddressId { get; set; } // BillToAddressID

        ///<summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        ///</summary>
        public int ShipToAddressId { get; set; } // ShipToAddressID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        public int? CreditCardId { get; set; } // CreditCardID

        ///<summary>
        /// Approval code provided by the credit card company.
        ///</summary>
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode (length: 15)

        ///<summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        ///</summary>
        public int? CurrencyRateId { get; set; } // CurrencyRateID

        ///<summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        ///</summary>
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Sales representative comments.
        ///</summary>
        public string Comment { get; set; } // Comment (length: 128)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SalesOrderDetail> SalesOrderDetails { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Address BillToAddress { get; set; } // FK_SalesOrderHeader_Address_BillToAddressID
        public virtual Address ShipToAddress { get; set; } // FK_SalesOrderHeader_Address_ShipToAddressID
        public virtual CreditCard CreditCard { get; set; } // FK_SalesOrderHeader_CreditCard_CreditCardID
        public virtual CurrencyRate CurrencyRate { get; set; } // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
        public virtual Customer Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID
        public virtual SalesPerson SalesPerson { get; set; } // FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_SalesOrderHeader_SalesTerritory_TerritoryID
        public virtual ShipMethod ShipMethod { get; set; } // FK_SalesOrderHeader_ShipMethod_ShipMethodID

        public SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new System.Collections.Generic.List<SalesOrderDetail>();
            SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<SalesOrderHeaderSalesReason>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesOrderHeaderSalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesOrderHeaderSalesReason
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to SalesReason.SalesReasonID.
        ///</summary>
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual SalesOrderHeader SalesOrderHeader { get; set; } // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
        public virtual SalesReason SalesReason { get; set; } // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID

        public SalesOrderHeaderSalesReason()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesPerson
    {

        ///<summary>
        /// Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Projected yearly sales.
        ///</summary>
        public decimal? SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// Bonus due if quota is met.
        ///</summary>
        public decimal Bonus { get; set; } // Bonus

        ///<summary>
        /// Commision percent received per sale.
        ///</summary>
        public decimal CommissionPct { get; set; } // CommissionPct

        ///<summary>
        /// Sales total year to date.
        ///</summary>
        public decimal SalesYtd { get; set; } // SalesYTD

        ///<summary>
        /// Sales total of previous year.
        ///</summary>
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual System.Collections.Generic.ICollection<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Store> Stores { get; set; } // Store.FK_Store_SalesPerson_SalesPersonID

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_SalesPerson_Employee_BusinessEntityID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_SalesPerson_SalesTerritory_TerritoryID

        public SalesPerson()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaders = new System.Collections.Generic.List<SalesOrderHeader>();
            SalesPersonQuotaHistories = new System.Collections.Generic.List<SalesPersonQuotaHistory>();
            SalesTerritoryHistories = new System.Collections.Generic.List<SalesTerritoryHistory>();
            Stores = new System.Collections.Generic.List<Store>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesPersonQuotaHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesPersonQuotaHistory
    {

        ///<summary>
        /// Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Sales quota date.
        ///</summary>
        public System.DateTime QuotaDate { get; set; } // QuotaDate (Primary key)

        ///<summary>
        /// Sales quota amount.
        ///</summary>
        public decimal SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual SalesPerson SalesPerson { get; set; } // FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID

        public SalesPersonQuotaHistory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesReason
    {

        ///<summary>
        /// Primary key for SalesReason records.
        ///</summary>
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Sales reason description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Category the sales reason belongs to.
        ///</summary>
        public string ReasonType { get; set; } // ReasonType (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping

        public SalesReason()
        {
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<SalesOrderHeaderSalesReason>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesTaxRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesTaxRate
    {

        ///<summary>
        /// Primary key for SalesTaxRate records.
        ///</summary>
        public int SalesTaxRateId { get; set; } // SalesTaxRateID (Primary key)

        ///<summary>
        /// State, province, or country/region the sales tax applies to.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
        ///</summary>
        public byte TaxType { get; set; } // TaxType

        ///<summary>
        /// Tax rate amount.
        ///</summary>
        public decimal TaxRate { get; set; } // TaxRate

        ///<summary>
        /// Tax rate description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual StateProvince StateProvince { get; set; } // FK_SalesTaxRate_StateProvince_StateProvinceID

        public SalesTaxRate()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesTerritory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesTerritory
    {

        ///<summary>
        /// Primary key for SalesTerritory records.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Sales territory description
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// Geographic area to which the sales territory belong.
        ///</summary>
        public string Group { get; set; } // Group (length: 50)

        ///<summary>
        /// Sales in the territory year to date.
        ///</summary>
        public decimal SalesYtd { get; set; } // SalesYTD

        ///<summary>
        /// Sales in the territory the previous year.
        ///</summary>
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// Business costs in the territory year to date.
        ///</summary>
        public decimal CostYtd { get; set; } // CostYTD

        ///<summary>
        /// Business costs in the territory the previous year.
        ///</summary>
        public decimal CostLastYear { get; set; } // CostLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Customer> Customers { get; set; } // Customer.FK_Customer_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<SalesPerson> SalesPersons { get; set; } // SalesPerson.FK_SalesPerson_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<StateProvince> StateProvinces { get; set; } // StateProvince.FK_StateProvince_SalesTerritory_TerritoryID

        // Foreign keys
        public virtual CountryRegion CountryRegion { get; set; } // FK_SalesTerritory_CountryRegion_CountryRegionCode

        public SalesTerritory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Customers = new System.Collections.Generic.List<Customer>();
            SalesOrderHeaders = new System.Collections.Generic.List<SalesOrderHeader>();
            SalesPersons = new System.Collections.Generic.List<SalesPerson>();
            SalesTerritoryHistories = new System.Collections.Generic.List<SalesTerritoryHistory>();
            StateProvinces = new System.Collections.Generic.List<StateProvince>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesTerritoryHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesTerritoryHistory
    {

        ///<summary>
        /// Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Primary key. Date the sales representive started work in the territory.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the sales representative left work in the territory.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual SalesPerson SalesPerson { get; set; } // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID

        public SalesTerritoryHistory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ScrapReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ScrapReason
    {

        ///<summary>
        /// Primary key for ScrapReason records.
        ///</summary>
        public short ScrapReasonId { get; set; } // ScrapReasonID (Primary key)

        ///<summary>
        /// Failure description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WorkOrder> WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_ScrapReason_ScrapReasonID

        public ScrapReason()
        {
            ModifiedDate = System.DateTime.Now;
            WorkOrders = new System.Collections.Generic.List<WorkOrder>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Shift
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Shift
    {

        ///<summary>
        /// Primary key for Shift records.
        ///</summary>
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Shift description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Shift start time.
        ///</summary>
        public System.TimeSpan StartTime { get; set; } // StartTime

        ///<summary>
        /// Shift end time.
        ///</summary>
        public System.TimeSpan EndTime { get; set; } // EndTime

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // Many to many mapping

        public Shift()
        {
            ModifiedDate = System.DateTime.Now;
            EmployeeDepartmentHistories = new System.Collections.Generic.List<EmployeeDepartmentHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ShipMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ShipMethod
    {

        ///<summary>
        /// Primary key for ShipMethod records.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID (Primary key)

        ///<summary>
        /// Shipping company name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Minimum shipping charge.
        ///</summary>
        public decimal ShipBase { get; set; } // ShipBase

        ///<summary>
        /// Shipping charge per pound.
        ///</summary>
        public decimal ShipRate { get; set; } // ShipRate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        public virtual System.Collections.Generic.ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_ShipMethod_ShipMethodID

        public ShipMethod()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            PurchaseOrderHeaders = new System.Collections.Generic.List<PurchaseOrderHeader>();
            SalesOrderHeaders = new System.Collections.Generic.List<SalesOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ShoppingCartItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ShoppingCartItem
    {

        ///<summary>
        /// Primary key for ShoppingCartItem records.
        ///</summary>
        public int ShoppingCartItemId { get; set; } // ShoppingCartItemID (Primary key)

        ///<summary>
        /// Shopping cart identification number.
        ///</summary>
        public string ShoppingCartId { get; set; } // ShoppingCartID (length: 50)

        ///<summary>
        /// Product quantity ordered.
        ///</summary>
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product ordered. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Date the time the record was created.
        ///</summary>
        public System.DateTime DateCreated { get; set; } // DateCreated

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ShoppingCartItem_Product_ProductID

        public ShoppingCartItem()
        {
            Quantity = 1;
            DateCreated = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SpecialOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SpecialOffer
    {

        ///<summary>
        /// Primary key for SpecialOffer records.
        ///</summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Discount description.
        ///</summary>
        public string Description { get; set; } // Description (length: 255)

        ///<summary>
        /// Discount precentage.
        ///</summary>
        public decimal DiscountPct { get; set; } // DiscountPct

        ///<summary>
        /// Discount type category.
        ///</summary>
        public string Type { get; set; } // Type (length: 50)

        ///<summary>
        /// Group the discount applies to such as Reseller or Customer.
        ///</summary>
        public string Category { get; set; } // Category (length: 50)

        ///<summary>
        /// Discount start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Discount end date.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// Minimum discount percent allowed.
        ///</summary>
        public int MinQty { get; set; } // MinQty

        ///<summary>
        /// Maximum discount percent allowed.
        ///</summary>
        public int? MaxQty { get; set; } // MaxQty

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SpecialOfferProduct> SpecialOfferProducts { get; set; } // Many to many mapping

        public SpecialOffer()
        {
            MinQty = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SpecialOfferProducts = new System.Collections.Generic.List<SpecialOfferProduct>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SpecialOfferProduct
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SpecialOfferProduct
    {

        ///<summary>
        /// Primary key for SpecialOfferProduct records.
        ///</summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        // Foreign keys
        public virtual Product Product { get; set; } // FK_SpecialOfferProduct_Product_ProductID
        public virtual SpecialOffer SpecialOffer { get; set; } // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public SpecialOfferProduct()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new System.Collections.Generic.List<SalesOrderDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class StateProvince
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 3)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag

        ///<summary>
        /// State or province description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Address> Addresses { get; set; } // Address.FK_Address_StateProvince_StateProvinceID
        public virtual System.Collections.Generic.ICollection<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate.FK_SalesTaxRate_StateProvince_StateProvinceID

        // Foreign keys
        public virtual CountryRegion CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_StateProvince_SalesTerritory_TerritoryID

        public StateProvince()
        {
            IsOnlyStateProvinceFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Addresses = new System.Collections.Generic.List<Address>();
            SalesTaxRates = new System.Collections.Generic.List<SalesTaxRate>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Store
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Store
    {

        ///<summary>
        /// Primary key. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Name of the store.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Demographic informationg about the store such as the number of employees, annual sales and store type.
        ///</summary>
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Customer> Customers { get; set; } // Customer.FK_Customer_Store_StoreID

        // Foreign keys
        public virtual BusinessEntity BusinessEntity { get; set; } // FK_Store_BusinessEntity_BusinessEntityID
        public virtual SalesPerson SalesPerson { get; set; } // FK_Store_SalesPerson_SalesPersonID

        public Store()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Customers = new System.Collections.Generic.List<Customer>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition

        public Sysdiagram()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TransactionHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class TransactionHistory
    {

        ///<summary>
        /// Primary key for TransactionHistory records.
        ///</summary>
        public int TransactionId { get; set; } // TransactionID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Purchase order, sales order, or work order identification number.
        ///</summary>
        public int ReferenceOrderId { get; set; } // ReferenceOrderID

        ///<summary>
        /// Line number associated with the purchase order, sales order, or work order.
        ///</summary>
        public int ReferenceOrderLineId { get; set; } // ReferenceOrderLineID

        ///<summary>
        /// Date and time of the transaction.
        ///</summary>
        public System.DateTime TransactionDate { get; set; } // TransactionDate

        ///<summary>
        /// W = WorkOrder, S = SalesOrder, P = PurchaseOrder
        ///</summary>
        public string TransactionType { get; set; } // TransactionType (length: 1)

        ///<summary>
        /// Product quantity.
        ///</summary>
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product cost.
        ///</summary>
        public decimal ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Product Product { get; set; } // FK_TransactionHistory_Product_ProductID

        public TransactionHistory()
        {
            ReferenceOrderLineId = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TransactionHistoryArchive
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class TransactionHistoryArchive
    {

        ///<summary>
        /// Primary key for TransactionHistoryArchive records.
        ///</summary>
        public int TransactionId { get; set; } // TransactionID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Purchase order, sales order, or work order identification number.
        ///</summary>
        public int ReferenceOrderId { get; set; } // ReferenceOrderID

        ///<summary>
        /// Line number associated with the purchase order, sales order, or work order.
        ///</summary>
        public int ReferenceOrderLineId { get; set; } // ReferenceOrderLineID

        ///<summary>
        /// Date and time of the transaction.
        ///</summary>
        public System.DateTime TransactionDate { get; set; } // TransactionDate

        ///<summary>
        /// W = Work Order, S = Sales Order, P = Purchase Order
        ///</summary>
        public string TransactionType { get; set; } // TransactionType (length: 1)

        ///<summary>
        /// Product quantity.
        ///</summary>
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product cost.
        ///</summary>
        public decimal ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public TransactionHistoryArchive()
        {
            ReferenceOrderLineId = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // UnitMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class UnitMeasure
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (Primary key) (length: 3)

        ///<summary>
        /// Unit of measure description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials.FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        public virtual System.Collections.Generic.ICollection<Product> SizeUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_SizeUnitMeasureCode
        public virtual System.Collections.Generic.ICollection<Product> WeightUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_WeightUnitMeasureCode
        public virtual System.Collections.Generic.ICollection<ProductVendor> ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_UnitMeasure_UnitMeasureCode

        public UnitMeasure()
        {
            ModifiedDate = System.DateTime.Now;
            BillOfMaterials = new System.Collections.Generic.List<BillOfMaterial>();
            SizeUnitMeasureCode = new System.Collections.Generic.List<Product>();
            WeightUnitMeasureCode = new System.Collections.Generic.List<Product>();
            ProductVendors = new System.Collections.Generic.List<ProductVendor>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vAdditionalContactInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VAdditionalContactInfo
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 50)
        public string TelephoneSpecialInstructions { get; set; } // TelephoneSpecialInstructions
        public string Street { get; set; } // Street (length: 50)
        public string City { get; set; } // City (length: 50)
        public string StateProvince { get; set; } // StateProvince (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 50)
        public string CountryRegion { get; set; } // CountryRegion (length: 50)
        public string HomeAddressSpecialInstructions { get; set; } // HomeAddressSpecialInstructions
        public string EMailAddress { get; set; } // EMailAddress (length: 128)
        public string EMailSpecialInstructions { get; set; } // EMailSpecialInstructions
        public string EMailTelephoneNumber { get; set; } // EMailTelephoneNumber (length: 50)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public VAdditionalContactInfo()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vEmployee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VEmployee
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string JobTitle { get; set; } // JobTitle (length: 50)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (length: 50)
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo

        public VEmployee()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vEmployeeDepartment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VEmployeeDepartment
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string JobTitle { get; set; } // JobTitle (length: 50)
        public string Department { get; set; } // Department (length: 50)
        public string GroupName { get; set; } // GroupName (length: 50)
        public System.DateTime StartDate { get; set; } // StartDate

        public VEmployeeDepartment()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vEmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VEmployeeDepartmentHistory
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string Shift { get; set; } // Shift (length: 50)
        public string Department { get; set; } // Department (length: 50)
        public string GroupName { get; set; } // GroupName (length: 50)
        public System.DateTime StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate

        public VEmployeeDepartmentHistory()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Vendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class Vendor
    {

        ///<summary>
        /// Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Vendor account (identification) number.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Company name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
        ///</summary>
        public byte CreditRating { get; set; } // CreditRating

        ///<summary>
        /// 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
        ///</summary>
        public bool PreferredVendorStatus { get; set; } // PreferredVendorStatus

        ///<summary>
        /// 0 = Vendor no longer used. 1 = Vendor is actively used.
        ///</summary>
        public bool ActiveFlag { get; set; } // ActiveFlag

        ///<summary>
        /// Vendor URL.
        ///</summary>
        public string PurchasingWebServiceUrl { get; set; } // PurchasingWebServiceURL (length: 1024)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProductVendor> ProductVendors { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Vendor_VendorID

        // Foreign keys
        public virtual BusinessEntity BusinessEntity { get; set; } // FK_Vendor_BusinessEntity_BusinessEntityID

        public Vendor()
        {
            PreferredVendorStatus = true;
            ActiveFlag = true;
            ModifiedDate = System.DateTime.Now;
            ProductVendors = new System.Collections.Generic.List<ProductVendor>();
            PurchaseOrderHeaders = new System.Collections.Generic.List<PurchaseOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vIndividualCustomer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VIndividualCustomer
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressType { get; set; } // AddressType (length: 50)
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (length: 50)
        public string Demographics { get; set; } // Demographics

        public VIndividualCustomer()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vJobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VJobCandidate
    {
        public int JobCandidateId { get; set; } // JobCandidateID
        public int? BusinessEntityId { get; set; } // BusinessEntityID
        public string Name46Prefix { get; set; } // Name.Prefix (length: 30)
        public string Name46First { get; set; } // Name.First (length: 30)
        public string Name46Middle { get; set; } // Name.Middle (length: 30)
        public string Name46Last { get; set; } // Name.Last (length: 30)
        public string Name46Suffix { get; set; } // Name.Suffix (length: 30)
        public string Skills { get; set; } // Skills
        public string Addr46Type { get; set; } // Addr.Type (length: 30)
        public string Addr46Loc46CountryRegion { get; set; } // Addr.Loc.CountryRegion (length: 100)
        public string Addr46Loc46State { get; set; } // Addr.Loc.State (length: 100)
        public string Addr46Loc46City { get; set; } // Addr.Loc.City (length: 100)
        public string Addr46PostalCode { get; set; } // Addr.PostalCode (length: 20)
        public string EMail { get; set; } // EMail
        public string WebSite { get; set; } // WebSite
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public VJobCandidate()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vJobCandidateEducation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VJobCandidateEducation
    {
        public int JobCandidateId { get; set; } // JobCandidateID
        public string Edu46Level { get; set; } // Edu.Level
        public System.DateTime? Edu46StartDate { get; set; } // Edu.StartDate
        public System.DateTime? Edu46EndDate { get; set; } // Edu.EndDate
        public string Edu46Degree { get; set; } // Edu.Degree (length: 50)
        public string Edu46Major { get; set; } // Edu.Major (length: 50)
        public string Edu46Minor { get; set; } // Edu.Minor (length: 50)
        public string Edu46Gpa { get; set; } // Edu.GPA (length: 5)
        public string Edu46GpaScale { get; set; } // Edu.GPAScale (length: 5)
        public string Edu46School { get; set; } // Edu.School (length: 100)
        public string Edu46Loc46CountryRegion { get; set; } // Edu.Loc.CountryRegion (length: 100)
        public string Edu46Loc46State { get; set; } // Edu.Loc.State (length: 100)
        public string Edu46Loc46City { get; set; } // Edu.Loc.City (length: 100)

        public VJobCandidateEducation()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vJobCandidateEmployment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VJobCandidateEmployment
    {
        public int JobCandidateId { get; set; } // JobCandidateID
        public System.DateTime? Emp46StartDate { get; set; } // Emp.StartDate
        public System.DateTime? Emp46EndDate { get; set; } // Emp.EndDate
        public string Emp46OrgName { get; set; } // Emp.OrgName (length: 100)
        public string Emp46JobTitle { get; set; } // Emp.JobTitle (length: 100)
        public string Emp46Responsibility { get; set; } // Emp.Responsibility
        public string Emp46FunctionCategory { get; set; } // Emp.FunctionCategory
        public string Emp46IndustryCategory { get; set; } // Emp.IndustryCategory
        public string Emp46Loc46CountryRegion { get; set; } // Emp.Loc.CountryRegion
        public string Emp46Loc46State { get; set; } // Emp.Loc.State
        public string Emp46Loc46City { get; set; } // Emp.Loc.City

        public VJobCandidateEmployment()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vPersonDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VPersonDemographic
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public decimal? TotalPurchaseYtd { get; set; } // TotalPurchaseYTD
        public System.DateTime? DateFirstPurchase { get; set; } // DateFirstPurchase
        public System.DateTime? BirthDate { get; set; } // BirthDate
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)
        public string YearlyIncome { get; set; } // YearlyIncome (length: 30)
        public string Gender { get; set; } // Gender (length: 1)
        public int? TotalChildren { get; set; } // TotalChildren
        public int? NumberChildrenAtHome { get; set; } // NumberChildrenAtHome
        public string Education { get; set; } // Education (length: 30)
        public string Occupation { get; set; } // Occupation (length: 30)
        public bool? HomeOwnerFlag { get; set; } // HomeOwnerFlag
        public int? NumberCarsOwned { get; set; } // NumberCarsOwned

        public VPersonDemographic()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vProductAndDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VProductAndDescription
    {
        public int ProductId { get; set; } // ProductID
        public string Name { get; set; } // Name (length: 50)
        public string ProductModel { get; set; } // ProductModel (length: 50)
        public string CultureId { get; set; } // CultureID (length: 6)
        public string Description { get; set; } // Description (length: 400)

        public VProductAndDescription()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vProductModelCatalogDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VProductModelCatalogDescription
    {
        public int ProductModelId { get; set; } // ProductModelID
        public string Name { get; set; } // Name (length: 50)
        public string Summary { get; set; } // Summary
        public string Manufacturer { get; set; } // Manufacturer
        public string Copyright { get; set; } // Copyright (length: 30)
        public string ProductUrl { get; set; } // ProductURL (length: 256)
        public string WarrantyPeriod { get; set; } // WarrantyPeriod (length: 256)
        public string WarrantyDescription { get; set; } // WarrantyDescription (length: 256)
        public string NoOfYears { get; set; } // NoOfYears (length: 256)
        public string MaintenanceDescription { get; set; } // MaintenanceDescription (length: 256)
        public string Wheel { get; set; } // Wheel (length: 256)
        public string Saddle { get; set; } // Saddle (length: 256)
        public string Pedal { get; set; } // Pedal (length: 256)
        public string BikeFrame { get; set; } // BikeFrame
        public string Crankset { get; set; } // Crankset (length: 256)
        public string PictureAngle { get; set; } // PictureAngle (length: 256)
        public string PictureSize { get; set; } // PictureSize (length: 256)
        public string ProductPhotoId { get; set; } // ProductPhotoID (length: 256)
        public string Material { get; set; } // Material (length: 256)
        public string Color { get; set; } // Color (length: 256)
        public string ProductLine { get; set; } // ProductLine (length: 256)
        public string Style { get; set; } // Style (length: 256)
        public string RiderExperience { get; set; } // RiderExperience (length: 1024)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public VProductModelCatalogDescription()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vProductModelInstructions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VProductModelInstruction
    {
        public int ProductModelId { get; set; } // ProductModelID
        public string Name { get; set; } // Name (length: 50)
        public string Instructions { get; set; } // Instructions
        public int? LocationId { get; set; } // LocationID
        public decimal? SetupHours { get; set; } // SetupHours
        public decimal? MachineHours { get; set; } // MachineHours
        public decimal? LaborHours { get; set; } // LaborHours
        public int? LotSize { get; set; } // LotSize
        public string Step { get; set; } // Step (length: 1024)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public VProductModelInstruction()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vSalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VSalesPerson
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string JobTitle { get; set; } // JobTitle (length: 50)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (length: 50)
        public string TerritoryName { get; set; } // TerritoryName (length: 50)
        public string TerritoryGroup { get; set; } // TerritoryGroup (length: 50)
        public decimal? SalesQuota { get; set; } // SalesQuota
        public decimal SalesYtd { get; set; } // SalesYTD
        public decimal SalesLastYear { get; set; } // SalesLastYear

        public VSalesPerson()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vSalesPersonSalesByFiscalYears
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VSalesPersonSalesByFiscalYear
    {
        public int? SalesPersonId { get; set; } // SalesPersonID
        public string FullName { get; set; } // FullName (length: 152)
        public string JobTitle { get; set; } // JobTitle (length: 50)
        public string SalesTerritory { get; set; } // SalesTerritory (length: 50)
        public decimal? C2002 { get; set; } // 2002
        public decimal? C2003 { get; set; } // 2003
        public decimal? C2004 { get; set; } // 2004

        public VSalesPersonSalesByFiscalYear()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStateProvinceCountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStateProvinceCountryRegion
    {
        public int StateProvinceId { get; set; } // StateProvinceID
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 3)
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)
        public int TerritoryId { get; set; } // TerritoryID
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)
        public string CountryRegionName { get; set; } // CountryRegionName (length: 50)

        public VStateProvinceCountryRegion()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStoreWithAddresses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStoreWithAddress
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Name { get; set; } // Name (length: 50)
        public string AddressType { get; set; } // AddressType (length: 50)
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (length: 50)

        public VStoreWithAddress()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStoreWithContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStoreWithContact
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Name { get; set; } // Name (length: 50)
        public string ContactType { get; set; } // ContactType (length: 50)
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion

        public VStoreWithContact()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStoreWithDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStoreWithDemographic
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Name { get; set; } // Name (length: 50)
        public decimal? AnnualSales { get; set; } // AnnualSales
        public decimal? AnnualRevenue { get; set; } // AnnualRevenue
        public string BankName { get; set; } // BankName (length: 50)
        public string BusinessType { get; set; } // BusinessType (length: 5)
        public int? YearOpened { get; set; } // YearOpened
        public string Specialty { get; set; } // Specialty (length: 50)
        public int? SquareFeet { get; set; } // SquareFeet
        public string Brands { get; set; } // Brands (length: 30)
        public string Internet { get; set; } // Internet (length: 30)
        public int? NumberEmployees { get; set; } // NumberEmployees

        public VStoreWithDemographic()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vVendorWithAddresses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VVendorWithAddress
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Name { get; set; } // Name (length: 50)
        public string AddressType { get; set; } // AddressType (length: 50)
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (length: 50)

        public VVendorWithAddress()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vVendorWithContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VVendorWithContact
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string Name { get; set; } // Name (length: 50)
        public string ContactType { get; set; } // ContactType (length: 50)
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion

        public VVendorWithContact()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // WorkOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class WorkOrder
    {

        ///<summary>
        /// Primary key for WorkOrder records.
        ///</summary>
        public int WorkOrderId { get; set; } // WorkOrderID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Product quantity to build.
        ///</summary>
        public int OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Quantity built and put in inventory.
        ///</summary>
        public int StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Quantity that failed inspection.
        ///</summary>
        public short ScrappedQty { get; set; } // ScrappedQty

        ///<summary>
        /// Work order start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Work order end date.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Work order due date.
        ///</summary>
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Reason for inspection failure.
        ///</summary>
        public short? ScrapReasonId { get; set; } // ScrapReasonID

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WorkOrderRouting> WorkOrderRoutings { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Product Product { get; set; } // FK_WorkOrder_Product_ProductID
        public virtual ScrapReason ScrapReason { get; set; } // FK_WorkOrder_ScrapReason_ScrapReasonID

        public WorkOrder()
        {
            ModifiedDate = System.DateTime.Now;
            WorkOrderRoutings = new System.Collections.Generic.List<WorkOrderRouting>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // WorkOrderRouting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class WorkOrderRouting
    {

        ///<summary>
        /// Primary key. Foreign key to WorkOrder.WorkOrderID.
        ///</summary>
        public int WorkOrderId { get; set; } // WorkOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Indicates the manufacturing process sequence.
        ///</summary>
        public short OperationSequence { get; set; } // OperationSequence (Primary key)

        ///<summary>
        /// Manufacturing location where the part is processed. Foreign key to Location.LocationID.
        ///</summary>
        public short LocationId { get; set; } // LocationID

        ///<summary>
        /// Planned manufacturing start date.
        ///</summary>
        public System.DateTime ScheduledStartDate { get; set; } // ScheduledStartDate

        ///<summary>
        /// Planned manufacturing end date.
        ///</summary>
        public System.DateTime ScheduledEndDate { get; set; } // ScheduledEndDate

        ///<summary>
        /// Actual start date.
        ///</summary>
        public System.DateTime? ActualStartDate { get; set; } // ActualStartDate

        ///<summary>
        /// Actual end date.
        ///</summary>
        public System.DateTime? ActualEndDate { get; set; } // ActualEndDate

        ///<summary>
        /// Number of manufacturing hours used.
        ///</summary>
        public decimal? ActualResourceHrs { get; set; } // ActualResourceHrs

        ///<summary>
        /// Estimated manufacturing cost.
        ///</summary>
        public decimal PlannedCost { get; set; } // PlannedCost

        ///<summary>
        /// Actual manufacturing cost.
        ///</summary>
        public decimal? ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Location Location { get; set; } // FK_WorkOrderRouting_Location_LocationID
        public virtual WorkOrder WorkOrder { get; set; } // FK_WorkOrderRouting_WorkOrder_WorkOrderID

        public WorkOrderRouting()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class AddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Address>
    {
        public AddressConfiguration()
            : this("Person")
        {
        }

        public AddressConfiguration(string schema)
        {
            ToTable("Address", schema);
            HasKey(x => x.AddressId);

            Property(x => x.AddressId).HasColumnName(@"AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.SpatialLocation).HasColumnName(@"SpatialLocation").IsOptional().HasColumnType("geography");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.StateProvince).WithMany(b => b.Addresses).HasForeignKey(c => c.StateProvinceId).WillCascadeOnDelete(false); // FK_Address_StateProvince_StateProvinceID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class AddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AddressType>
    {
        public AddressTypeConfiguration()
            : this("Person")
        {
        }

        public AddressTypeConfiguration(string schema)
        {
            ToTable("AddressType", schema);
            HasKey(x => x.AddressTypeId);

            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // AWBuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class AwBuildVersionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AwBuildVersion>
    {
        public AwBuildVersionConfiguration()
            : this("dbo")
        {
        }

        public AwBuildVersionConfiguration(string schema)
        {
            ToTable("AWBuildVersion", schema);
            HasKey(x => x.SystemInformationId);

            Property(x => x.SystemInformationId).HasColumnName(@"SystemInformationID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DatabaseVersion).HasColumnName(@"Database Version").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.VersionDate).HasColumnName(@"VersionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // BillOfMaterials
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BillOfMaterialConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BillOfMaterial>
    {
        public BillOfMaterialConfiguration()
            : this("Production")
        {
        }

        public BillOfMaterialConfiguration(string schema)
        {
            ToTable("BillOfMaterials", schema);
            HasKey(x => x.BillOfMaterialsId);

            Property(x => x.BillOfMaterialsId).HasColumnName(@"BillOfMaterialsID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductAssemblyId).HasColumnName(@"ProductAssemblyID").IsOptional().HasColumnType("int");
            Property(x => x.ComponentId).HasColumnName(@"ComponentID").IsRequired().HasColumnType("int");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.UnitMeasureCode).HasColumnName(@"UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.BomLevel).HasColumnName(@"BOMLevel").IsRequired().HasColumnType("smallint");
            Property(x => x.PerAssemblyQty).HasColumnName(@"PerAssemblyQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ProductAssembly).WithMany(b => b.ProductAssembly).HasForeignKey(c => c.ProductAssemblyId).WillCascadeOnDelete(false); // FK_BillOfMaterials_Product_ProductAssemblyID
            HasRequired(a => a.Component).WithMany(b => b.Component).HasForeignKey(c => c.ComponentId).WillCascadeOnDelete(false); // FK_BillOfMaterials_Product_ComponentID
            HasRequired(a => a.UnitMeasure).WithMany(b => b.BillOfMaterials).HasForeignKey(c => c.UnitMeasureCode).WillCascadeOnDelete(false); // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // BusinessEntity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BusinessEntityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BusinessEntity>
    {
        public BusinessEntityConfiguration()
            : this("Person")
        {
        }

        public BusinessEntityConfiguration(string schema)
        {
            ToTable("BusinessEntity", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // BusinessEntityAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BusinessEntityAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BusinessEntityAddress>
    {
        public BusinessEntityAddressConfiguration()
            : this("Person")
        {
        }

        public BusinessEntityAddressConfiguration(string schema)
        {
            ToTable("BusinessEntityAddress", schema);
            HasKey(x => new { x.BusinessEntityId, x.AddressId, x.AddressTypeId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName(@"AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.BusinessEntityAddresses).HasForeignKey(c => c.AddressId).WillCascadeOnDelete(false); // FK_BusinessEntityAddress_Address_AddressID
            HasRequired(a => a.AddressType).WithMany(b => b.BusinessEntityAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_BusinessEntityAddress_AddressType_AddressTypeID
            HasRequired(a => a.BusinessEntity).WithMany(b => b.BusinessEntityAddresses).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // BusinessEntityContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class BusinessEntityContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BusinessEntityContact>
    {
        public BusinessEntityContactConfiguration()
            : this("Person")
        {
        }

        public BusinessEntityContactConfiguration(string schema)
        {
            ToTable("BusinessEntityContact", schema);
            HasKey(x => new { x.BusinessEntityId, x.PersonId, x.ContactTypeId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContactTypeId).HasColumnName(@"ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.BusinessEntity).WithMany(b => b.BusinessEntityContacts).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
            HasRequired(a => a.ContactType).WithMany(b => b.BusinessEntityContacts).HasForeignKey(c => c.ContactTypeId).WillCascadeOnDelete(false); // FK_BusinessEntityContact_ContactType_ContactTypeID
            HasRequired(a => a.Person).WithMany(b => b.BusinessEntityContacts).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_BusinessEntityContact_Person_PersonID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ContactTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContactType>
    {
        public ContactTypeConfiguration()
            : this("Person")
        {
        }

        public ContactTypeConfiguration(string schema)
        {
            ToTable("ContactType", schema);
            HasKey(x => x.ContactTypeId);

            Property(x => x.ContactTypeId).HasColumnName(@"ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CountryRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryRegion>
    {
        public CountryRegionConfiguration()
            : this("Person")
        {
        }

        public CountryRegionConfiguration(string schema)
        {
            ToTable("CountryRegion", schema);
            HasKey(x => x.CountryRegionCode);

            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CountryRegionCurrency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CountryRegionCurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryRegionCurrency>
    {
        public CountryRegionCurrencyConfiguration()
            : this("Sales")
        {
        }

        public CountryRegionCurrencyConfiguration(string schema)
        {
            ToTable("CountryRegionCurrency", schema);
            HasKey(x => new { x.CountryRegionCode, x.CurrencyCode });

            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CurrencyCode).HasColumnName(@"CurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.CountryRegion).WithMany(b => b.CountryRegionCurrencies).HasForeignKey(c => c.CountryRegionCode).WillCascadeOnDelete(false); // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
            HasRequired(a => a.Currency).WithMany(b => b.CountryRegionCurrencies).HasForeignKey(c => c.CurrencyCode).WillCascadeOnDelete(false); // FK_CountryRegionCurrency_Currency_CurrencyCode
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CreditCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CreditCard>
    {
        public CreditCardConfiguration()
            : this("Sales")
        {
        }

        public CreditCardConfiguration(string schema)
        {
            ToTable("CreditCard", schema);
            HasKey(x => x.CreditCardId);

            Property(x => x.CreditCardId).HasColumnName(@"CreditCardID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CardType).HasColumnName(@"CardType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CardNumber).HasColumnName(@"CardNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.ExpMonth).HasColumnName(@"ExpMonth").IsRequired().HasColumnType("tinyint");
            Property(x => x.ExpYear).HasColumnName(@"ExpYear").IsRequired().HasColumnType("smallint");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Culture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CultureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Culture>
    {
        public CultureConfiguration()
            : this("Production")
        {
        }

        public CultureConfiguration(string schema)
        {
            ToTable("Culture", schema);
            HasKey(x => x.CultureId);

            Property(x => x.CultureId).HasColumnName(@"CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Currency>
    {
        public CurrencyConfiguration()
            : this("Sales")
        {
        }

        public CurrencyConfiguration(string schema)
        {
            ToTable("Currency", schema);
            HasKey(x => x.CurrencyCode);

            Property(x => x.CurrencyCode).HasColumnName(@"CurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CurrencyRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CurrencyRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CurrencyRate>
    {
        public CurrencyRateConfiguration()
            : this("Sales")
        {
        }

        public CurrencyRateConfiguration(string schema)
        {
            ToTable("CurrencyRate", schema);
            HasKey(x => x.CurrencyRateId);

            Property(x => x.CurrencyRateId).HasColumnName(@"CurrencyRateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CurrencyRateDate).HasColumnName(@"CurrencyRateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.FromCurrencyCode).HasColumnName(@"FromCurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.ToCurrencyCode).HasColumnName(@"ToCurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.AverageRate).HasColumnName(@"AverageRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.EndOfDayRate).HasColumnName(@"EndOfDayRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Currency_FromCurrencyCode).WithMany(b => b.FromCurrencyCode).HasForeignKey(c => c.FromCurrencyCode).WillCascadeOnDelete(false); // FK_CurrencyRate_Currency_FromCurrencyCode
            HasRequired(a => a.Currency_ToCurrencyCode).WithMany(b => b.ToCurrencyCode).HasForeignKey(c => c.ToCurrencyCode).WillCascadeOnDelete(false); // FK_CurrencyRate_Currency_ToCurrencyCode
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Customer>
    {
        public CustomerConfiguration()
            : this("Sales")
        {
        }

        public CustomerConfiguration(string schema)
        {
            ToTable("Customer", schema);
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName(@"CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonId).HasColumnName(@"PersonID").IsOptional().HasColumnType("int");
            Property(x => x.StoreId).HasColumnName(@"StoreID").IsOptional().HasColumnType("int");
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Person).WithMany(b => b.Customers).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_Customer_Person_PersonID
            HasOptional(a => a.SalesTerritory).WithMany(b => b.Customers).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_Customer_SalesTerritory_TerritoryID
            HasOptional(a => a.Store).WithMany(b => b.Customers).HasForeignKey(c => c.StoreId).WillCascadeOnDelete(false); // FK_Customer_Store_StoreID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DatabaseLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class DatabaseLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DatabaseLog>
    {
        public DatabaseLogConfiguration()
            : this("dbo")
        {
        }

        public DatabaseLogConfiguration(string schema)
        {
            ToTable("DatabaseLog", schema);
            HasKey(x => x.DatabaseLogId);

            Property(x => x.DatabaseLogId).HasColumnName(@"DatabaseLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PostTime).HasColumnName(@"PostTime").IsRequired().HasColumnType("datetime");
            Property(x => x.DatabaseUser).HasColumnName(@"DatabaseUser").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Event).HasColumnName(@"Event").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Schema).HasColumnName(@"Schema").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Object).HasColumnName(@"Object").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Tsql).HasColumnName(@"TSQL").IsRequired().HasColumnType("nvarchar(max)");
            Property(x => x.XmlEvent).HasColumnName(@"XmlEvent").IsRequired().HasColumnType("xml");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("HumanResources")
        {
        }

        public DepartmentConfiguration(string schema)
        {
            ToTable("Department", schema);
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName(@"GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class DocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Document>
    {
        public DocumentConfiguration()
            : this("Production")
        {
        }

        public DocumentConfiguration(string schema)
        {
            ToTable("Document", schema);
            HasKey(x => x.DocumentNode);

            Property(x => x.DocumentNode).HasColumnName(@"DocumentNode").IsRequired().HasColumnType("hierarchyid").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentLevel).HasColumnName(@"DocumentLevel").IsOptional().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Owner).HasColumnName(@"Owner").IsRequired().HasColumnType("int");
            Property(x => x.FolderFlag).HasColumnName(@"FolderFlag").IsRequired().HasColumnType("bit");
            Property(x => x.FileName).HasColumnName(@"FileName").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.FileExtension).HasColumnName(@"FileExtension").IsRequired().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.Revision).HasColumnName(@"Revision").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(5);
            Property(x => x.ChangeNumber).HasColumnName(@"ChangeNumber").IsRequired().HasColumnType("int");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.DocumentSummary).HasColumnName(@"DocumentSummary").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Document_).HasColumnName(@"Document").IsOptional().HasColumnType("varbinary");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Employee).WithMany(b => b.Documents).HasForeignKey(c => c.Owner).WillCascadeOnDelete(false); // FK_Document_Employee_Owner
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmailAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailAddress>
    {
        public EmailAddressConfiguration()
            : this("Person")
        {
        }

        public EmailAddressConfiguration(string schema)
        {
            ToTable("EmailAddress", schema);
            HasKey(x => new { x.BusinessEntityId, x.EmailAddressId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddressId).HasColumnName(@"EmailAddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress_).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person).WithMany(b => b.EmailAddresses).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_EmailAddress_Person_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("HumanResources")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            ToTable("Employee", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NationalIdNumber).HasColumnName(@"NationalIDNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.LoginId).HasColumnName(@"LoginID").IsRequired().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.OrganizationNode).HasColumnName(@"OrganizationNode").IsOptional().HasColumnType("hierarchyid");
            Property(x => x.OrganizationLevel).HasColumnName(@"OrganizationLevel").IsOptional().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").IsRequired().HasColumnType("date");
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Gender).HasColumnName(@"Gender").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.HireDate).HasColumnName(@"HireDate").IsRequired().HasColumnType("date");
            Property(x => x.SalariedFlag).HasColumnName(@"SalariedFlag").IsRequired().HasColumnType("bit");
            Property(x => x.VacationHours).HasColumnName(@"VacationHours").IsRequired().HasColumnType("smallint");
            Property(x => x.SickLeaveHours).HasColumnName(@"SickLeaveHours").IsRequired().HasColumnType("smallint");
            Property(x => x.CurrentFlag).HasColumnName(@"CurrentFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person).WithOptional(b => b.Employee).WillCascadeOnDelete(false); // FK_Employee_Person_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmployeeDepartmentHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeeDepartmentHistory>
    {
        public EmployeeDepartmentHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public EmployeeDepartmentHistoryConfiguration(string schema)
        {
            ToTable("EmployeeDepartmentHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.StartDate, x.DepartmentId, x.ShiftId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShiftId).HasColumnName(@"ShiftID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("date").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("date");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Department).WithMany(b => b.EmployeeDepartmentHistories).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // FK_EmployeeDepartmentHistory_Department_DepartmentID
            HasRequired(a => a.Employee).WithMany(b => b.EmployeeDepartmentHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
            HasRequired(a => a.Shift).WithMany(b => b.EmployeeDepartmentHistories).HasForeignKey(c => c.ShiftId).WillCascadeOnDelete(false); // FK_EmployeeDepartmentHistory_Shift_ShiftID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EmployeePayHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class EmployeePayHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeePayHistory>
    {
        public EmployeePayHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public EmployeePayHistoryConfiguration(string schema)
        {
            ToTable("EmployeePayHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.RateChangeDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RateChangeDate).HasColumnName(@"RateChangeDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rate).HasColumnName(@"Rate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.PayFrequency).HasColumnName(@"PayFrequency").IsRequired().HasColumnType("tinyint");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Employee).WithMany(b => b.EmployeePayHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_EmployeePayHistory_Employee_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ErrorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ErrorLog>
    {
        public ErrorLogConfiguration()
            : this("dbo")
        {
        }

        public ErrorLogConfiguration(string schema)
        {
            ToTable("ErrorLog", schema);
            HasKey(x => x.ErrorLogId);

            Property(x => x.ErrorLogId).HasColumnName(@"ErrorLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ErrorTime).HasColumnName(@"ErrorTime").IsRequired().HasColumnType("datetime");
            Property(x => x.UserName).HasColumnName(@"UserName").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.ErrorNumber).HasColumnName(@"ErrorNumber").IsRequired().HasColumnType("int");
            Property(x => x.ErrorSeverity).HasColumnName(@"ErrorSeverity").IsOptional().HasColumnType("int");
            Property(x => x.ErrorState).HasColumnName(@"ErrorState").IsOptional().HasColumnType("int");
            Property(x => x.ErrorProcedure).HasColumnName(@"ErrorProcedure").IsOptional().HasColumnType("nvarchar").HasMaxLength(126);
            Property(x => x.ErrorLine).HasColumnName(@"ErrorLine").IsOptional().HasColumnType("int");
            Property(x => x.ErrorMessage).HasColumnName(@"ErrorMessage").IsRequired().HasColumnType("nvarchar").HasMaxLength(4000);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Illustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class IllustrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Illustration>
    {
        public IllustrationConfiguration()
            : this("Production")
        {
        }

        public IllustrationConfiguration(string schema)
        {
            ToTable("Illustration", schema);
            HasKey(x => x.IllustrationId);

            Property(x => x.IllustrationId).HasColumnName(@"IllustrationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Diagram).HasColumnName(@"Diagram").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class JobCandidateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JobCandidate>
    {
        public JobCandidateConfiguration()
            : this("HumanResources")
        {
        }

        public JobCandidateConfiguration(string schema)
        {
            ToTable("JobCandidate", schema);
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName(@"JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsOptional().HasColumnType("int");
            Property(x => x.Resume).HasColumnName(@"Resume").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.JobCandidates).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_JobCandidate_Employee_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("Production")
        {
        }

        public LocationConfiguration(string schema)
        {
            ToTable("Location", schema);
            HasKey(x => x.LocationId);

            Property(x => x.LocationId).HasColumnName(@"LocationID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CostRate).HasColumnName(@"CostRate").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Availability).HasColumnName(@"Availability").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PasswordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Password>
    {
        public PasswordConfiguration()
            : this("Person")
        {
        }

        public PasswordConfiguration(string schema)
        {
            ToTable("Password", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(128);
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person).WithOptional(b => b.Password).WillCascadeOnDelete(false); // FK_Password_Person_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("Person")
        {
        }

        public PersonConfiguration(string schema)
        {
            ToTable("Person", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonType).HasColumnName(@"PersonType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.NameStyle).HasColumnName(@"NameStyle").IsRequired().HasColumnType("bit");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AdditionalContactInfo).HasColumnName(@"AdditionalContactInfo").IsOptional().HasColumnType("xml");
            Property(x => x.Demographics).HasColumnName(@"Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.BusinessEntity).WithOptional(b => b.Person).WillCascadeOnDelete(false); // FK_Person_BusinessEntity_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PersonCreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PersonCreditCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonCreditCard>
    {
        public PersonCreditCardConfiguration()
            : this("Sales")
        {
        }

        public PersonCreditCardConfiguration(string schema)
        {
            ToTable("PersonCreditCard", schema);
            HasKey(x => new { x.BusinessEntityId, x.CreditCardId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreditCardId).HasColumnName(@"CreditCardID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.CreditCard).WithMany(b => b.PersonCreditCards).HasForeignKey(c => c.CreditCardId).WillCascadeOnDelete(false); // FK_PersonCreditCard_CreditCard_CreditCardID
            HasRequired(a => a.Person).WithMany(b => b.PersonCreditCards).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_PersonCreditCard_Person_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PersonPhoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonPhone>
    {
        public PersonPhoneConfiguration()
            : this("Person")
        {
        }

        public PersonPhoneConfiguration(string schema)
        {
            ToTable("PersonPhone", schema);
            HasKey(x => new { x.BusinessEntityId, x.PhoneNumber, x.PhoneNumberTypeId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumberTypeId).HasColumnName(@"PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person).WithMany(b => b.PersonPhones).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_PersonPhone_Person_BusinessEntityID
            HasRequired(a => a.PhoneNumberType).WithMany(b => b.PersonPhones).HasForeignKey(c => c.PhoneNumberTypeId).WillCascadeOnDelete(false); // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PhoneNumberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhoneNumberType>
    {
        public PhoneNumberTypeConfiguration()
            : this("Person")
        {
        }

        public PhoneNumberTypeConfiguration(string schema)
        {
            ToTable("PhoneNumberType", schema);
            HasKey(x => x.PhoneNumberTypeId);

            Property(x => x.PhoneNumberTypeId).HasColumnName(@"PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Product>
    {
        public ProductConfiguration()
            : this("Production")
        {
        }

        public ProductConfiguration(string schema)
        {
            ToTable("Product", schema);
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.MakeFlag).HasColumnName(@"MakeFlag").IsRequired().HasColumnType("bit");
            Property(x => x.FinishedGoodsFlag).HasColumnName(@"FinishedGoodsFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Color).HasColumnName(@"Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.SafetyStockLevel).HasColumnName(@"SafetyStockLevel").IsRequired().HasColumnType("smallint");
            Property(x => x.ReorderPoint).HasColumnName(@"ReorderPoint").IsRequired().HasColumnType("smallint");
            Property(x => x.StandardCost).HasColumnName(@"StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ListPrice).HasColumnName(@"ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Size).HasColumnName(@"Size").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.SizeUnitMeasureCode).HasColumnName(@"SizeUnitMeasureCode").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.WeightUnitMeasureCode).HasColumnName(@"WeightUnitMeasureCode").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.Weight).HasColumnName(@"Weight").IsOptional().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.DaysToManufacture).HasColumnName(@"DaysToManufacture").IsRequired().HasColumnType("int");
            Property(x => x.ProductLine).HasColumnName(@"ProductLine").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.Class).HasColumnName(@"Class").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.Style).HasColumnName(@"Style").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.ProductSubcategoryId).HasColumnName(@"ProductSubcategoryID").IsOptional().HasColumnType("int");
            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsOptional().HasColumnType("int");
            Property(x => x.SellStartDate).HasColumnName(@"SellStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.SellEndDate).HasColumnName(@"SellEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DiscontinuedDate).HasColumnName(@"DiscontinuedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ProductModel).WithMany(b => b.Products).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_Product_ProductModel_ProductModelID
            HasOptional(a => a.ProductSubcategory).WithMany(b => b.Products).HasForeignKey(c => c.ProductSubcategoryId).WillCascadeOnDelete(false); // FK_Product_ProductSubcategory_ProductSubcategoryID
            HasOptional(a => a.UnitMeasure_SizeUnitMeasureCode).WithMany(b => b.SizeUnitMeasureCode).HasForeignKey(c => c.SizeUnitMeasureCode).WillCascadeOnDelete(false); // FK_Product_UnitMeasure_SizeUnitMeasureCode
            HasOptional(a => a.UnitMeasure_WeightUnitMeasureCode).WithMany(b => b.WeightUnitMeasureCode).HasForeignKey(c => c.WeightUnitMeasureCode).WillCascadeOnDelete(false); // FK_Product_UnitMeasure_WeightUnitMeasureCode
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductCategory>
    {
        public ProductCategoryConfiguration()
            : this("Production")
        {
        }

        public ProductCategoryConfiguration(string schema)
        {
            ToTable("ProductCategory", schema);
            HasKey(x => x.ProductCategoryId);

            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductCostHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductCostHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductCostHistory>
    {
        public ProductCostHistoryConfiguration()
            : this("Production")
        {
        }

        public ProductCostHistoryConfiguration(string schema)
        {
            ToTable("ProductCostHistory", schema);
            HasKey(x => new { x.ProductId, x.StartDate });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.StandardCost).HasColumnName(@"StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductCostHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductCostHistory_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductDescription>
    {
        public ProductDescriptionConfiguration()
            : this("Production")
        {
        }

        public ProductDescriptionConfiguration(string schema)
        {
            ToTable("ProductDescription", schema);
            HasKey(x => x.ProductDescriptionId);

            Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductDocument>
    {
        public ProductDocumentConfiguration()
            : this("Production")
        {
        }

        public ProductDocumentConfiguration(string schema)
        {
            ToTable("ProductDocument", schema);
            HasKey(x => new { x.ProductId, x.DocumentNode });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentNode).HasColumnName(@"DocumentNode").IsRequired().HasColumnType("hierarchyid").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Document).WithMany(b => b.ProductDocuments).HasForeignKey(c => c.DocumentNode).WillCascadeOnDelete(false); // FK_ProductDocument_Document_DocumentNode
            HasRequired(a => a.Product).WithMany(b => b.ProductDocuments).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductDocument_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductInventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductInventory>
    {
        public ProductInventoryConfiguration()
            : this("Production")
        {
        }

        public ProductInventoryConfiguration(string schema)
        {
            ToTable("ProductInventory", schema);
            HasKey(x => new { x.ProductId, x.LocationId });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocationId).HasColumnName(@"LocationID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Shelf).HasColumnName(@"Shelf").IsRequired().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Bin).HasColumnName(@"Bin").IsRequired().HasColumnType("tinyint");
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("smallint");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Location).WithMany(b => b.ProductInventories).HasForeignKey(c => c.LocationId).WillCascadeOnDelete(false); // FK_ProductInventory_Location_LocationID
            HasRequired(a => a.Product).WithMany(b => b.ProductInventories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductInventory_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductListPriceHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductListPriceHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductListPriceHistory>
    {
        public ProductListPriceHistoryConfiguration()
            : this("Production")
        {
        }

        public ProductListPriceHistoryConfiguration(string schema)
        {
            ToTable("ProductListPriceHistory", schema);
            HasKey(x => new { x.ProductId, x.StartDate });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ListPrice).HasColumnName(@"ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductListPriceHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductListPriceHistory_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductModelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductModel>
    {
        public ProductModelConfiguration()
            : this("Production")
        {
        }

        public ProductModelConfiguration(string schema)
        {
            ToTable("ProductModel", schema);
            HasKey(x => x.ProductModelId);

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CatalogDescription).HasColumnName(@"CatalogDescription").IsOptional().HasColumnType("xml");
            Property(x => x.Instructions).HasColumnName(@"Instructions").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductModelIllustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductModelIllustrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductModelIllustration>
    {
        public ProductModelIllustrationConfiguration()
            : this("Production")
        {
        }

        public ProductModelIllustrationConfiguration(string schema)
        {
            ToTable("ProductModelIllustration", schema);
            HasKey(x => new { x.ProductModelId, x.IllustrationId });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IllustrationId).HasColumnName(@"IllustrationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Illustration).WithMany(b => b.ProductModelIllustrations).HasForeignKey(c => c.IllustrationId).WillCascadeOnDelete(false); // FK_ProductModelIllustration_Illustration_IllustrationID
            HasRequired(a => a.ProductModel).WithMany(b => b.ProductModelIllustrations).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_ProductModelIllustration_ProductModel_ProductModelID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductModelProductDescriptionCulture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductModelProductDescriptionCultureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductModelProductDescriptionCulture>
    {
        public ProductModelProductDescriptionCultureConfiguration()
            : this("Production")
        {
        }

        public ProductModelProductDescriptionCultureConfiguration(string schema)
        {
            ToTable("ProductModelProductDescriptionCulture", schema);
            HasKey(x => new { x.ProductModelId, x.ProductDescriptionId, x.CultureId });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CultureId).HasColumnName(@"CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Culture).WithMany(b => b.ProductModelProductDescriptionCultures).HasForeignKey(c => c.CultureId).WillCascadeOnDelete(false); // FK_ProductModelProductDescriptionCulture_Culture_CultureID
            HasRequired(a => a.ProductDescription).WithMany(b => b.ProductModelProductDescriptionCultures).HasForeignKey(c => c.ProductDescriptionId).WillCascadeOnDelete(false); // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
            HasRequired(a => a.ProductModel).WithMany(b => b.ProductModelProductDescriptionCultures).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductPhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductPhoto>
    {
        public ProductPhotoConfiguration()
            : this("Production")
        {
        }

        public ProductPhotoConfiguration(string schema)
        {
            ToTable("ProductPhoto", schema);
            HasKey(x => x.ProductPhotoId);

            Property(x => x.ProductPhotoId).HasColumnName(@"ProductPhotoID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ThumbNailPhoto).HasColumnName(@"ThumbNailPhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.ThumbnailPhotoFileName).HasColumnName(@"ThumbnailPhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LargePhoto).HasColumnName(@"LargePhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.LargePhotoFileName).HasColumnName(@"LargePhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductProductPhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductProductPhoto>
    {
        public ProductProductPhotoConfiguration()
            : this("Production")
        {
        }

        public ProductProductPhotoConfiguration(string schema)
        {
            ToTable("ProductProductPhoto", schema);
            HasKey(x => new { x.ProductId, x.ProductPhotoId });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductPhotoId).HasColumnName(@"ProductPhotoID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Primary).HasColumnName(@"Primary").IsRequired().HasColumnType("bit");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductProductPhotoes).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductProductPhoto_Product_ProductID
            HasRequired(a => a.ProductPhoto).WithMany(b => b.ProductProductPhotoes).HasForeignKey(c => c.ProductPhotoId).WillCascadeOnDelete(false); // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductReviewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductReview>
    {
        public ProductReviewConfiguration()
            : this("Production")
        {
        }

        public ProductReviewConfiguration(string schema)
        {
            ToTable("ProductReview", schema);
            HasKey(x => x.ProductReviewId);

            Property(x => x.ProductReviewId).HasColumnName(@"ProductReviewID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReviewerName).HasColumnName(@"ReviewerName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rating).HasColumnName(@"Rating").IsRequired().HasColumnType("int");
            Property(x => x.Comments).HasColumnName(@"Comments").IsOptional().HasColumnType("nvarchar").HasMaxLength(3850);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductReviews).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductReview_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductSubcategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductSubcategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductSubcategory>
    {
        public ProductSubcategoryConfiguration()
            : this("Production")
        {
        }

        public ProductSubcategoryConfiguration(string schema)
        {
            ToTable("ProductSubcategory", schema);
            HasKey(x => x.ProductSubcategoryId);

            Property(x => x.ProductSubcategoryId).HasColumnName(@"ProductSubcategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.ProductCategory).WithMany(b => b.ProductSubcategories).HasForeignKey(c => c.ProductCategoryId).WillCascadeOnDelete(false); // FK_ProductSubcategory_ProductCategory_ProductCategoryID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductVendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ProductVendorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductVendor>
    {
        public ProductVendorConfiguration()
            : this("Purchasing")
        {
        }

        public ProductVendorConfiguration(string schema)
        {
            ToTable("ProductVendor", schema);
            HasKey(x => new { x.ProductId, x.BusinessEntityId });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AverageLeadTime).HasColumnName(@"AverageLeadTime").IsRequired().HasColumnType("int");
            Property(x => x.StandardPrice).HasColumnName(@"StandardPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LastReceiptCost).HasColumnName(@"LastReceiptCost").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LastReceiptDate).HasColumnName(@"LastReceiptDate").IsOptional().HasColumnType("datetime");
            Property(x => x.MinOrderQty).HasColumnName(@"MinOrderQty").IsRequired().HasColumnType("int");
            Property(x => x.MaxOrderQty).HasColumnName(@"MaxOrderQty").IsRequired().HasColumnType("int");
            Property(x => x.OnOrderQty).HasColumnName(@"OnOrderQty").IsOptional().HasColumnType("int");
            Property(x => x.UnitMeasureCode).HasColumnName(@"UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductVendors).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductVendor_Product_ProductID
            HasRequired(a => a.UnitMeasure).WithMany(b => b.ProductVendors).HasForeignKey(c => c.UnitMeasureCode).WillCascadeOnDelete(false); // FK_ProductVendor_UnitMeasure_UnitMeasureCode
            HasRequired(a => a.Vendor).WithMany(b => b.ProductVendors).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_ProductVendor_Vendor_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PurchaseOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PurchaseOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PurchaseOrderDetail>
    {
        public PurchaseOrderDetailConfiguration()
            : this("Purchasing")
        {
        }

        public PurchaseOrderDetailConfiguration(string schema)
        {
            ToTable("PurchaseOrderDetail", schema);
            HasKey(x => new { x.PurchaseOrderId, x.PurchaseOrderDetailId });

            Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PurchaseOrderDetailId).HasColumnName(@"PurchaseOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DueDate).HasColumnName(@"DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName(@"LineTotal").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ReceivedQty).HasColumnName(@"ReceivedQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.RejectedQty).HasColumnName(@"RejectedQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.StockedQty).HasColumnName(@"StockedQty").IsRequired().HasColumnType("decimal").HasPrecision(9,2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.PurchaseOrderDetails).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_PurchaseOrderDetail_Product_ProductID
            HasRequired(a => a.PurchaseOrderHeader).WithMany(b => b.PurchaseOrderDetails).HasForeignKey(c => c.PurchaseOrderId).WillCascadeOnDelete(false); // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PurchaseOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class PurchaseOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PurchaseOrderHeader>
    {
        public PurchaseOrderHeaderConfiguration()
            : this("Purchasing")
        {
        }

        public PurchaseOrderHeaderConfiguration(string schema)
        {
            ToTable("PurchaseOrderHeader", schema);
            HasKey(x => x.PurchaseOrderId);

            Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName(@"RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").IsRequired().HasColumnType("int");
            Property(x => x.VendorId).HasColumnName(@"VendorID").IsRequired().HasColumnType("int");
            Property(x => x.ShipMethodId).HasColumnName(@"ShipMethodID").IsRequired().HasColumnType("int");
            Property(x => x.OrderDate).HasColumnName(@"OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName(@"ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.SubTotal).HasColumnName(@"SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName(@"TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName(@"Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName(@"TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Employee).WithMany(b => b.PurchaseOrderHeaders).HasForeignKey(c => c.EmployeeId).WillCascadeOnDelete(false); // FK_PurchaseOrderHeader_Employee_EmployeeID
            HasRequired(a => a.ShipMethod).WithMany(b => b.PurchaseOrderHeaders).HasForeignKey(c => c.ShipMethodId).WillCascadeOnDelete(false); // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
            HasRequired(a => a.Vendor).WithMany(b => b.PurchaseOrderHeaders).HasForeignKey(c => c.VendorId).WillCascadeOnDelete(false); // FK_PurchaseOrderHeader_Vendor_VendorID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesOrderDetail>
    {
        public SalesOrderDetailConfiguration()
            : this("Sales")
        {
        }

        public SalesOrderDetailConfiguration(string schema)
        {
            ToTable("SalesOrderDetail", schema);
            HasKey(x => new { x.SalesOrderId, x.SalesOrderDetailId });

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesOrderDetailId).HasColumnName(@"SalesOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CarrierTrackingNumber).HasColumnName(@"CarrierTrackingNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasColumnName(@"UnitPriceDiscount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName(@"LineTotal").IsRequired().HasColumnType("numeric").HasPrecision(38,6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesOrderHeader).WithMany(b => b.SalesOrderDetails).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
            HasRequired(a => a.SpecialOfferProduct).WithMany(b => b.SalesOrderDetails).HasForeignKey(c => new { c.SpecialOfferId, c.ProductId }).WillCascadeOnDelete(false); // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesOrderHeader>
    {
        public SalesOrderHeaderConfiguration()
            : this("Sales")
        {
        }

        public SalesOrderHeaderConfiguration(string schema)
        {
            ToTable("SalesOrderHeader", schema);
            HasKey(x => x.SalesOrderId);

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName(@"RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.OrderDate).HasColumnName(@"OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName(@"DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName(@"ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.OnlineOrderFlag).HasColumnName(@"OnlineOrderFlag").IsRequired().HasColumnType("bit");
            Property(x => x.SalesOrderNumber).HasColumnName(@"SalesOrderNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.PurchaseOrderNumber).HasColumnName(@"PurchaseOrderNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CustomerId).HasColumnName(@"CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.BillToAddressId).HasColumnName(@"BillToAddressID").IsRequired().HasColumnType("int");
            Property(x => x.ShipToAddressId).HasColumnName(@"ShipToAddressID").IsRequired().HasColumnType("int");
            Property(x => x.ShipMethodId).HasColumnName(@"ShipMethodID").IsRequired().HasColumnType("int");
            Property(x => x.CreditCardId).HasColumnName(@"CreditCardID").IsOptional().HasColumnType("int");
            Property(x => x.CreditCardApprovalCode).HasColumnName(@"CreditCardApprovalCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.CurrencyRateId).HasColumnName(@"CurrencyRateID").IsOptional().HasColumnType("int");
            Property(x => x.SubTotal).HasColumnName(@"SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName(@"TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName(@"Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName(@"TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Comment).HasColumnName(@"Comment").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.CreditCard).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CreditCardId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_CreditCard_CreditCardID
            HasOptional(a => a.CurrencyRate).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CurrencyRateId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
            HasOptional(a => a.SalesPerson).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.SalesPersonId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_SalesPerson_SalesPersonID
            HasOptional(a => a.SalesTerritory).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_SalesTerritory_TerritoryID
            HasRequired(a => a.BillToAddress).WithMany(b => b.BillToAddress).HasForeignKey(c => c.BillToAddressId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Address_BillToAddressID
            HasRequired(a => a.Customer).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CustomerId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Customer_CustomerID
            HasRequired(a => a.ShipMethod).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.ShipMethodId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_ShipMethod_ShipMethodID
            HasRequired(a => a.ShipToAddress).WithMany(b => b.ShipToAddress).HasForeignKey(c => c.ShipToAddressId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Address_ShipToAddressID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesOrderHeaderSalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesOrderHeaderSalesReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesOrderHeaderSalesReason>
    {
        public SalesOrderHeaderSalesReasonConfiguration()
            : this("Sales")
        {
        }

        public SalesOrderHeaderSalesReasonConfiguration(string schema)
        {
            ToTable("SalesOrderHeaderSalesReason", schema);
            HasKey(x => new { x.SalesOrderId, x.SalesReasonId });

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesReasonId).HasColumnName(@"SalesReasonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesOrderHeader).WithMany(b => b.SalesOrderHeaderSalesReasons).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
            HasRequired(a => a.SalesReason).WithMany(b => b.SalesOrderHeaderSalesReasons).HasForeignKey(c => c.SalesReasonId).WillCascadeOnDelete(false); // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesPersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesPerson>
    {
        public SalesPersonConfiguration()
            : this("Sales")
        {
        }

        public SalesPersonConfiguration(string schema)
        {
            ToTable("SalesPerson", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Bonus).HasColumnName(@"Bonus").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CommissionPct).HasColumnName(@"CommissionPct").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.SalesTerritory).WithMany(b => b.SalesPersons).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesPerson_SalesTerritory_TerritoryID
            HasRequired(a => a.Employee).WithOptional(b => b.SalesPerson).WillCascadeOnDelete(false); // FK_SalesPerson_Employee_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesPersonQuotaHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesPersonQuotaHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesPersonQuotaHistory>
    {
        public SalesPersonQuotaHistoryConfiguration()
            : this("Sales")
        {
        }

        public SalesPersonQuotaHistoryConfiguration(string schema)
        {
            ToTable("SalesPersonQuotaHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.QuotaDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuotaDate).HasColumnName(@"QuotaDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesPerson).WithMany(b => b.SalesPersonQuotaHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesReason>
    {
        public SalesReasonConfiguration()
            : this("Sales")
        {
        }

        public SalesReasonConfiguration(string schema)
        {
            ToTable("SalesReason", schema);
            HasKey(x => x.SalesReasonId);

            Property(x => x.SalesReasonId).HasColumnName(@"SalesReasonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ReasonType).HasColumnName(@"ReasonType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesTaxRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesTaxRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesTaxRate>
    {
        public SalesTaxRateConfiguration()
            : this("Sales")
        {
        }

        public SalesTaxRateConfiguration(string schema)
        {
            ToTable("SalesTaxRate", schema);
            HasKey(x => x.SalesTaxRateId);

            Property(x => x.SalesTaxRateId).HasColumnName(@"SalesTaxRateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.TaxType).HasColumnName(@"TaxType").IsRequired().HasColumnType("tinyint");
            Property(x => x.TaxRate).HasColumnName(@"TaxRate").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.StateProvince).WithMany(b => b.SalesTaxRates).HasForeignKey(c => c.StateProvinceId).WillCascadeOnDelete(false); // FK_SalesTaxRate_StateProvince_StateProvinceID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesTerritory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesTerritoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesTerritory>
    {
        public SalesTerritoryConfiguration()
            : this("Sales")
        {
        }

        public SalesTerritoryConfiguration(string schema)
        {
            ToTable("SalesTerritory", schema);
            HasKey(x => x.TerritoryId);

            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.Group).HasColumnName(@"Group").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CostYtd).HasColumnName(@"CostYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CostLastYear).HasColumnName(@"CostLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.CountryRegion).WithMany(b => b.SalesTerritories).HasForeignKey(c => c.CountryRegionCode).WillCascadeOnDelete(false); // FK_SalesTerritory_CountryRegion_CountryRegionCode
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesTerritoryHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SalesTerritoryHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesTerritoryHistory>
    {
        public SalesTerritoryHistoryConfiguration()
            : this("Sales")
        {
        }

        public SalesTerritoryHistoryConfiguration(string schema)
        {
            ToTable("SalesTerritoryHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.StartDate, x.TerritoryId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesPerson).WithMany(b => b.SalesTerritoryHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
            HasRequired(a => a.SalesTerritory).WithMany(b => b.SalesTerritoryHistories).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ScrapReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ScrapReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrapReason>
    {
        public ScrapReasonConfiguration()
            : this("Production")
        {
        }

        public ScrapReasonConfiguration(string schema)
        {
            ToTable("ScrapReason", schema);
            HasKey(x => x.ScrapReasonId);

            Property(x => x.ScrapReasonId).HasColumnName(@"ScrapReasonID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Shift
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ShiftConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Shift>
    {
        public ShiftConfiguration()
            : this("HumanResources")
        {
        }

        public ShiftConfiguration(string schema)
        {
            ToTable("Shift", schema);
            HasKey(x => x.ShiftId);

            Property(x => x.ShiftId).HasColumnName(@"ShiftID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartTime).HasColumnName(@"StartTime").IsRequired().HasColumnType("time");
            Property(x => x.EndTime).HasColumnName(@"EndTime").IsRequired().HasColumnType("time");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ShipMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ShipMethodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ShipMethod>
    {
        public ShipMethodConfiguration()
            : this("Purchasing")
        {
        }

        public ShipMethodConfiguration(string schema)
        {
            ToTable("ShipMethod", schema);
            HasKey(x => x.ShipMethodId);

            Property(x => x.ShipMethodId).HasColumnName(@"ShipMethodID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ShipBase).HasColumnName(@"ShipBase").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ShipRate).HasColumnName(@"ShipRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ShoppingCartItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class ShoppingCartItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ShoppingCartItem>
    {
        public ShoppingCartItemConfiguration()
            : this("Sales")
        {
        }

        public ShoppingCartItemConfiguration(string schema)
        {
            ToTable("ShoppingCartItem", schema);
            HasKey(x => x.ShoppingCartItemId);

            Property(x => x.ShoppingCartItemId).HasColumnName(@"ShoppingCartItemID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ShoppingCartId).HasColumnName(@"ShoppingCartID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ShoppingCartItems).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ShoppingCartItem_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SpecialOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SpecialOfferConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpecialOffer>
    {
        public SpecialOfferConfiguration()
            : this("Sales")
        {
        }

        public SpecialOfferConfiguration(string schema)
        {
            ToTable("SpecialOffer", schema);
            HasKey(x => x.SpecialOfferId);

            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.DiscountPct).HasColumnName(@"DiscountPct").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Type).HasColumnName(@"Type").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Category).HasColumnName(@"Category").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsRequired().HasColumnType("datetime");
            Property(x => x.MinQty).HasColumnName(@"MinQty").IsRequired().HasColumnType("int");
            Property(x => x.MaxQty).HasColumnName(@"MaxQty").IsOptional().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SpecialOfferProduct
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SpecialOfferProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpecialOfferProduct>
    {
        public SpecialOfferProductConfiguration()
            : this("Sales")
        {
        }

        public SpecialOfferProductConfiguration(string schema)
        {
            ToTable("SpecialOfferProduct", schema);
            HasKey(x => new { x.SpecialOfferId, x.ProductId });

            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.SpecialOfferProducts).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_SpecialOfferProduct_Product_ProductID
            HasRequired(a => a.SpecialOffer).WithMany(b => b.SpecialOfferProducts).HasForeignKey(c => c.SpecialOfferId).WillCascadeOnDelete(false); // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class StateProvinceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateProvince>
    {
        public StateProvinceConfiguration()
            : this("Person")
        {
        }

        public StateProvinceConfiguration(string schema)
        {
            ToTable("StateProvince", schema);
            HasKey(x => x.StateProvinceId);

            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceCode).HasColumnName(@"StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName(@"IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.CountryRegion).WithMany(b => b.StateProvinces).HasForeignKey(c => c.CountryRegionCode).WillCascadeOnDelete(false); // FK_StateProvince_CountryRegion_CountryRegionCode
            HasRequired(a => a.SalesTerritory).WithMany(b => b.StateProvinces).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_StateProvince_SalesTerritory_TerritoryID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Store
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class StoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Store>
    {
        public StoreConfiguration()
            : this("Sales")
        {
        }

        public StoreConfiguration(string schema)
        {
            ToTable("Store", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.Demographics).HasColumnName(@"Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.SalesPerson).WithMany(b => b.Stores).HasForeignKey(c => c.SalesPersonId).WillCascadeOnDelete(false); // FK_Store_SalesPerson_SalesPersonID
            HasRequired(a => a.BusinessEntity).WithOptional(b => b.Store).WillCascadeOnDelete(false); // FK_Store_BusinessEntity_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TransactionHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class TransactionHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TransactionHistory>
    {
        public TransactionHistoryConfiguration()
            : this("Production")
        {
        }

        public TransactionHistoryConfiguration(string schema)
        {
            ToTable("TransactionHistory", schema);
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName(@"TransactionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderId).HasColumnName(@"ReferenceOrderID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderLineId).HasColumnName(@"ReferenceOrderLineID").IsRequired().HasColumnType("int");
            Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.TransactionType).HasColumnName(@"TransactionType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ActualCost).HasColumnName(@"ActualCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.TransactionHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_TransactionHistory_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TransactionHistoryArchive
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class TransactionHistoryArchiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TransactionHistoryArchive>
    {
        public TransactionHistoryArchiveConfiguration()
            : this("Production")
        {
        }

        public TransactionHistoryArchiveConfiguration(string schema)
        {
            ToTable("TransactionHistoryArchive", schema);
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName(@"TransactionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderId).HasColumnName(@"ReferenceOrderID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderLineId).HasColumnName(@"ReferenceOrderLineID").IsRequired().HasColumnType("int");
            Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.TransactionType).HasColumnName(@"TransactionType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ActualCost).HasColumnName(@"ActualCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // UnitMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class UnitMeasureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UnitMeasure>
    {
        public UnitMeasureConfiguration()
            : this("Production")
        {
        }

        public UnitMeasureConfiguration(string schema)
        {
            ToTable("UnitMeasure", schema);
            HasKey(x => x.UnitMeasureCode);

            Property(x => x.UnitMeasureCode).HasColumnName(@"UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vAdditionalContactInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VAdditionalContactInfoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VAdditionalContactInfo>
    {
        public VAdditionalContactInfoConfiguration()
            : this("Person")
        {
        }

        public VAdditionalContactInfoConfiguration(string schema)
        {
            ToTable("vAdditionalContactInfo", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.Rowguid, x.ModifiedDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TelephoneSpecialInstructions).HasColumnName(@"TelephoneSpecialInstructions").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Street).HasColumnName(@"Street").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"City").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StateProvince).HasColumnName(@"StateProvince").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegion).HasColumnName(@"CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.HomeAddressSpecialInstructions).HasColumnName(@"HomeAddressSpecialInstructions").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.EMailAddress).HasColumnName(@"EMailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.EMailSpecialInstructions).HasColumnName(@"EMailSpecialInstructions").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.EMailTelephoneNumber).HasColumnName(@"EMailTelephoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vEmployee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VEmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VEmployee>
    {
        public VEmployeeConfiguration()
            : this("HumanResources")
        {
        }

        public VEmployeeConfiguration(string schema)
        {
            ToTable("vEmployee", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.JobTitle, x.EmailPromotion, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AdditionalContactInfo).HasColumnName(@"AdditionalContactInfo").IsOptional().HasColumnType("xml");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vEmployeeDepartment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VEmployeeDepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VEmployeeDepartment>
    {
        public VEmployeeDepartmentConfiguration()
            : this("HumanResources")
        {
        }

        public VEmployeeDepartmentConfiguration(string schema)
        {
            ToTable("vEmployeeDepartment", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.JobTitle, x.Department, x.GroupName, x.StartDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Department).HasColumnName(@"Department").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName(@"GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("date");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vEmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VEmployeeDepartmentHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VEmployeeDepartmentHistory>
    {
        public VEmployeeDepartmentHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public VEmployeeDepartmentHistoryConfiguration(string schema)
        {
            ToTable("vEmployeeDepartmentHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.Shift, x.Department, x.GroupName, x.StartDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Shift).HasColumnName(@"Shift").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Department).HasColumnName(@"Department").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName(@"GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("date");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("date");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Vendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VendorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Vendor>
    {
        public VendorConfiguration()
            : this("Purchasing")
        {
        }

        public VendorConfiguration(string schema)
        {
            ToTable("Vendor", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CreditRating).HasColumnName(@"CreditRating").IsRequired().HasColumnType("tinyint");
            Property(x => x.PreferredVendorStatus).HasColumnName(@"PreferredVendorStatus").IsRequired().HasColumnType("bit");
            Property(x => x.ActiveFlag).HasColumnName(@"ActiveFlag").IsRequired().HasColumnType("bit");
            Property(x => x.PurchasingWebServiceUrl).HasColumnName(@"PurchasingWebServiceURL").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.BusinessEntity).WithOptional(b => b.Vendor).WillCascadeOnDelete(false); // FK_Vendor_BusinessEntity_BusinessEntityID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vIndividualCustomer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VIndividualCustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VIndividualCustomer>
    {
        public VIndividualCustomerConfiguration()
            : this("Sales")
        {
        }

        public VIndividualCustomerConfiguration(string schema)
        {
            ToTable("vIndividualCustomer", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.EmailPromotion, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressType).HasColumnName(@"AddressType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Demographics).HasColumnName(@"Demographics").IsOptional().HasColumnType("xml");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vJobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VJobCandidateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VJobCandidate>
    {
        public VJobCandidateConfiguration()
            : this("HumanResources")
        {
        }

        public VJobCandidateConfiguration(string schema)
        {
            ToTable("vJobCandidate", schema);
            HasKey(x => new { x.JobCandidateId, x.ModifiedDate });

            Property(x => x.JobCandidateId).HasColumnName(@"JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsOptional().HasColumnType("int");
            Property(x => x.Name46Prefix).HasColumnName(@"Name.Prefix").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46First).HasColumnName(@"Name.First").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46Middle).HasColumnName(@"Name.Middle").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46Last).HasColumnName(@"Name.Last").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46Suffix).HasColumnName(@"Name.Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Skills).HasColumnName(@"Skills").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Addr46Type).HasColumnName(@"Addr.Type").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Addr46Loc46CountryRegion).HasColumnName(@"Addr.Loc.CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Addr46Loc46State).HasColumnName(@"Addr.Loc.State").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Addr46Loc46City).HasColumnName(@"Addr.Loc.City").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Addr46PostalCode).HasColumnName(@"Addr.PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(20);
            Property(x => x.EMail).HasColumnName(@"EMail").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.WebSite).HasColumnName(@"WebSite").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vJobCandidateEducation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VJobCandidateEducationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VJobCandidateEducation>
    {
        public VJobCandidateEducationConfiguration()
            : this("HumanResources")
        {
        }

        public VJobCandidateEducationConfiguration(string schema)
        {
            ToTable("vJobCandidateEducation", schema);
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName(@"JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Edu46Level).HasColumnName(@"Edu.Level").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Edu46StartDate).HasColumnName(@"Edu.StartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Edu46EndDate).HasColumnName(@"Edu.EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Edu46Degree).HasColumnName(@"Edu.Degree").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Edu46Major).HasColumnName(@"Edu.Major").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Edu46Minor).HasColumnName(@"Edu.Minor").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Edu46Gpa).HasColumnName(@"Edu.GPA").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.Edu46GpaScale).HasColumnName(@"Edu.GPAScale").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.Edu46School).HasColumnName(@"Edu.School").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Edu46Loc46CountryRegion).HasColumnName(@"Edu.Loc.CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Edu46Loc46State).HasColumnName(@"Edu.Loc.State").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Edu46Loc46City).HasColumnName(@"Edu.Loc.City").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vJobCandidateEmployment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VJobCandidateEmploymentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VJobCandidateEmployment>
    {
        public VJobCandidateEmploymentConfiguration()
            : this("HumanResources")
        {
        }

        public VJobCandidateEmploymentConfiguration(string schema)
        {
            ToTable("vJobCandidateEmployment", schema);
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName(@"JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Emp46StartDate).HasColumnName(@"Emp.StartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Emp46EndDate).HasColumnName(@"Emp.EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Emp46OrgName).HasColumnName(@"Emp.OrgName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Emp46JobTitle).HasColumnName(@"Emp.JobTitle").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Emp46Responsibility).HasColumnName(@"Emp.Responsibility").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Emp46FunctionCategory).HasColumnName(@"Emp.FunctionCategory").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Emp46IndustryCategory).HasColumnName(@"Emp.IndustryCategory").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Emp46Loc46CountryRegion).HasColumnName(@"Emp.Loc.CountryRegion").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Emp46Loc46State).HasColumnName(@"Emp.Loc.State").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Emp46Loc46City).HasColumnName(@"Emp.Loc.City").IsOptional().HasColumnType("nvarchar(max)");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vPersonDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VPersonDemographicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VPersonDemographic>
    {
        public VPersonDemographicConfiguration()
            : this("Sales")
        {
        }

        public VPersonDemographicConfiguration(string schema)
        {
            ToTable("vPersonDemographics", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.TotalPurchaseYtd).HasColumnName(@"TotalPurchaseYTD").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DateFirstPurchase).HasColumnName(@"DateFirstPurchase").IsOptional().HasColumnType("datetime");
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").IsOptional().HasColumnType("datetime");
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").IsOptional().HasColumnType("nvarchar").HasMaxLength(1);
            Property(x => x.YearlyIncome).HasColumnName(@"YearlyIncome").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Gender).HasColumnName(@"Gender").IsOptional().HasColumnType("nvarchar").HasMaxLength(1);
            Property(x => x.TotalChildren).HasColumnName(@"TotalChildren").IsOptional().HasColumnType("int");
            Property(x => x.NumberChildrenAtHome).HasColumnName(@"NumberChildrenAtHome").IsOptional().HasColumnType("int");
            Property(x => x.Education).HasColumnName(@"Education").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Occupation).HasColumnName(@"Occupation").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.HomeOwnerFlag).HasColumnName(@"HomeOwnerFlag").IsOptional().HasColumnType("bit");
            Property(x => x.NumberCarsOwned).HasColumnName(@"NumberCarsOwned").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vProductAndDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VProductAndDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VProductAndDescription>
    {
        public VProductAndDescriptionConfiguration()
            : this("Production")
        {
        }

        public VProductAndDescriptionConfiguration(string schema)
        {
            ToTable("vProductAndDescription", schema);
            HasKey(x => new { x.ProductId, x.Name, x.ProductModel, x.CultureId, x.Description });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductModel).HasColumnName(@"ProductModel").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CultureId).HasColumnName(@"CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6);
            Property(x => x.Description).HasColumnName(@"Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vProductModelCatalogDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VProductModelCatalogDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VProductModelCatalogDescription>
    {
        public VProductModelCatalogDescriptionConfiguration()
            : this("Production")
        {
        }

        public VProductModelCatalogDescriptionConfiguration(string schema)
        {
            ToTable("vProductModelCatalogDescription", schema);
            HasKey(x => new { x.ProductModelId, x.Name, x.Rowguid, x.ModifiedDate });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Summary).HasColumnName(@"Summary").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Manufacturer).HasColumnName(@"Manufacturer").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Copyright).HasColumnName(@"Copyright").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.ProductUrl).HasColumnName(@"ProductURL").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.WarrantyPeriod).HasColumnName(@"WarrantyPeriod").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.WarrantyDescription).HasColumnName(@"WarrantyDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.NoOfYears).HasColumnName(@"NoOfYears").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.MaintenanceDescription).HasColumnName(@"MaintenanceDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Wheel).HasColumnName(@"Wheel").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Saddle).HasColumnName(@"Saddle").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Pedal).HasColumnName(@"Pedal").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.BikeFrame).HasColumnName(@"BikeFrame").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Crankset).HasColumnName(@"Crankset").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.PictureAngle).HasColumnName(@"PictureAngle").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.PictureSize).HasColumnName(@"PictureSize").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ProductPhotoId).HasColumnName(@"ProductPhotoID").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Material).HasColumnName(@"Material").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Color).HasColumnName(@"Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ProductLine).HasColumnName(@"ProductLine").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Style).HasColumnName(@"Style").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.RiderExperience).HasColumnName(@"RiderExperience").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vProductModelInstructions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VProductModelInstructionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VProductModelInstruction>
    {
        public VProductModelInstructionConfiguration()
            : this("Production")
        {
        }

        public VProductModelInstructionConfiguration(string schema)
        {
            ToTable("vProductModelInstructions", schema);
            HasKey(x => new { x.ProductModelId, x.Name, x.Rowguid, x.ModifiedDate });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Instructions).HasColumnName(@"Instructions").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.LocationId).HasColumnName(@"LocationID").IsOptional().HasColumnType("int");
            Property(x => x.SetupHours).HasColumnName(@"SetupHours").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.MachineHours).HasColumnName(@"MachineHours").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.LaborHours).HasColumnName(@"LaborHours").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.LotSize).HasColumnName(@"LotSize").IsOptional().HasColumnType("int");
            Property(x => x.Step).HasColumnName(@"Step").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vSalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VSalesPersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VSalesPerson>
    {
        public VSalesPersonConfiguration()
            : this("Sales")
        {
        }

        public VSalesPersonConfiguration(string schema)
        {
            ToTable("vSalesPerson", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.JobTitle, x.EmailPromotion, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName, x.SalesYtd, x.SalesLastYear });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryName).HasColumnName(@"TerritoryName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryGroup).HasColumnName(@"TerritoryGroup").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vSalesPersonSalesByFiscalYears
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VSalesPersonSalesByFiscalYearConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VSalesPersonSalesByFiscalYear>
    {
        public VSalesPersonSalesByFiscalYearConfiguration()
            : this("Sales")
        {
        }

        public VSalesPersonSalesByFiscalYearConfiguration(string schema)
        {
            ToTable("vSalesPersonSalesByFiscalYears", schema);
            HasKey(x => new { x.JobTitle, x.SalesTerritory });

            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.FullName).HasColumnName(@"FullName").IsOptional().HasColumnType("nvarchar").HasMaxLength(152);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesTerritory).HasColumnName(@"SalesTerritory").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.C2002).HasColumnName(@"2002").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.C2003).HasColumnName(@"2003").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.C2004).HasColumnName(@"2004").IsOptional().HasColumnType("money").HasPrecision(19,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStateProvinceCountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStateProvinceCountryRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStateProvinceCountryRegion>
    {
        public VStateProvinceCountryRegionConfiguration()
            : this("Person")
        {
        }

        public VStateProvinceCountryRegionConfiguration(string schema)
        {
            ToTable("vStateProvinceCountryRegion", schema);
            HasKey(x => new { x.StateProvinceId, x.StateProvinceCode, x.IsOnlyStateProvinceFlag, x.StateProvinceName, x.TerritoryId, x.CountryRegionCode, x.CountryRegionName });

            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.StateProvinceCode).HasColumnName(@"StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName(@"IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStoreWithAddresses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStoreWithAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStoreWithAddress>
    {
        public VStoreWithAddressConfiguration()
            : this("Sales")
        {
        }

        public VStoreWithAddressConfiguration(string schema)
        {
            ToTable("vStoreWithAddresses", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressType).HasColumnName(@"AddressType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStoreWithContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStoreWithContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStoreWithContact>
    {
        public VStoreWithContactConfiguration()
            : this("Sales")
        {
        }

        public VStoreWithContactConfiguration(string schema)
        {
            ToTable("vStoreWithContacts", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name, x.ContactType, x.FirstName, x.LastName, x.EmailPromotion });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ContactType).HasColumnName(@"ContactType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStoreWithDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VStoreWithDemographicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStoreWithDemographic>
    {
        public VStoreWithDemographicConfiguration()
            : this("Sales")
        {
        }

        public VStoreWithDemographicConfiguration(string schema)
        {
            ToTable("vStoreWithDemographics", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AnnualSales).HasColumnName(@"AnnualSales").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.AnnualRevenue).HasColumnName(@"AnnualRevenue").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.BankName).HasColumnName(@"BankName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BusinessType).HasColumnName(@"BusinessType").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.YearOpened).HasColumnName(@"YearOpened").IsOptional().HasColumnType("int");
            Property(x => x.Specialty).HasColumnName(@"Specialty").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SquareFeet).HasColumnName(@"SquareFeet").IsOptional().HasColumnType("int");
            Property(x => x.Brands).HasColumnName(@"Brands").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Internet).HasColumnName(@"Internet").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.NumberEmployees).HasColumnName(@"NumberEmployees").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vVendorWithAddresses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VVendorWithAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VVendorWithAddress>
    {
        public VVendorWithAddressConfiguration()
            : this("Purchasing")
        {
        }

        public VVendorWithAddressConfiguration(string schema)
        {
            ToTable("vVendorWithAddresses", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressType).HasColumnName(@"AddressType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vVendorWithContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class VVendorWithContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VVendorWithContact>
    {
        public VVendorWithContactConfiguration()
            : this("Purchasing")
        {
        }

        public VVendorWithContactConfiguration(string schema)
        {
            ToTable("vVendorWithContacts", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name, x.ContactType, x.FirstName, x.LastName, x.EmailPromotion });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ContactType).HasColumnName(@"ContactType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // WorkOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class WorkOrderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkOrder>
    {
        public WorkOrderConfiguration()
            : this("Production")
        {
        }

        public WorkOrderConfiguration(string schema)
        {
            ToTable("WorkOrder", schema);
            HasKey(x => x.WorkOrderId);

            Property(x => x.WorkOrderId).HasColumnName(@"WorkOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").IsRequired().HasColumnType("int");
            Property(x => x.StockedQty).HasColumnName(@"StockedQty").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ScrappedQty).HasColumnName(@"ScrappedQty").IsRequired().HasColumnType("smallint");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName(@"DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ScrapReasonId).HasColumnName(@"ScrapReasonID").IsOptional().HasColumnType("smallint");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ScrapReason).WithMany(b => b.WorkOrders).HasForeignKey(c => c.ScrapReasonId).WillCascadeOnDelete(false); // FK_WorkOrder_ScrapReason_ScrapReasonID
            HasRequired(a => a.Product).WithMany(b => b.WorkOrders).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_WorkOrder_Product_ProductID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // WorkOrderRouting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class WorkOrderRoutingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkOrderRouting>
    {
        public WorkOrderRoutingConfiguration()
            : this("Production")
        {
        }

        public WorkOrderRoutingConfiguration(string schema)
        {
            ToTable("WorkOrderRouting", schema);
            HasKey(x => new { x.WorkOrderId, x.ProductId, x.OperationSequence });

            Property(x => x.WorkOrderId).HasColumnName(@"WorkOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OperationSequence).HasColumnName(@"OperationSequence").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocationId).HasColumnName(@"LocationID").IsRequired().HasColumnType("smallint");
            Property(x => x.ScheduledStartDate).HasColumnName(@"ScheduledStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ScheduledEndDate).HasColumnName(@"ScheduledEndDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ActualStartDate).HasColumnName(@"ActualStartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ActualEndDate).HasColumnName(@"ActualEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ActualResourceHrs).HasColumnName(@"ActualResourceHrs").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.PlannedCost).HasColumnName(@"PlannedCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ActualCost).HasColumnName(@"ActualCost").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Location).WithMany(b => b.WorkOrderRoutings).HasForeignKey(c => c.LocationId).WillCascadeOnDelete(false); // FK_WorkOrderRouting_Location_LocationID
            HasRequired(a => a.WorkOrder).WithMany(b => b.WorkOrderRoutings).HasForeignKey(c => c.WorkOrderId).WillCascadeOnDelete(false); // FK_WorkOrderRouting_WorkOrder_WorkOrderID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

